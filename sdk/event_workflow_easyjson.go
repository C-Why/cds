// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package sdk

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson486f95b0DecodeGithubComOvhCdsSdk(in *jlexer.Lexer, out *EventWorkflowUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "new_workflow":
			easyjson486f95b0DecodeGithubComOvhCdsSdk1(in, &out.NewWorkflow)
		case "old_workflow":
			easyjson486f95b0DecodeGithubComOvhCdsSdk1(in, &out.OldWorkflow)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk(out *jwriter.Writer, in EventWorkflowUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"new_workflow\":"
		out.RawString(prefix[1:])
		easyjson486f95b0EncodeGithubComOvhCdsSdk1(out, in.NewWorkflow)
	}
	{
		const prefix string = ",\"old_workflow\":"
		out.RawString(prefix)
		easyjson486f95b0EncodeGithubComOvhCdsSdk1(out, in.OldWorkflow)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventWorkflowUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson486f95b0EncodeGithubComOvhCdsSdk(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventWorkflowUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson486f95b0EncodeGithubComOvhCdsSdk(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventWorkflowUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson486f95b0DecodeGithubComOvhCdsSdk(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventWorkflowUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson486f95b0DecodeGithubComOvhCdsSdk(l, v)
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk1(in *jlexer.Lexer, out *Workflow) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "icon":
			out.Icon = string(in.String())
		case "last_modified":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastModified).UnmarshalJSON(data))
			}
		case "project_id":
			out.ProjectID = int64(in.Int64())
		case "project_key":
			out.ProjectKey = string(in.String())
		case "groups":
			if in.IsNull() {
				in.Skip()
				out.Groups = nil
			} else {
				in.Delim('[')
				if out.Groups == nil {
					if !in.IsDelim(']') {
						out.Groups = make([]GroupPermission, 0, 1)
					} else {
						out.Groups = []GroupPermission{}
					}
				} else {
					out.Groups = (out.Groups)[:0]
				}
				for !in.IsDelim(']') {
					var v1 GroupPermission
					easyjson486f95b0DecodeGithubComOvhCdsSdk2(in, &v1)
					out.Groups = append(out.Groups, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "permissions":
			easyjson486f95b0DecodeGithubComOvhCdsSdk3(in, &out.Permissions)
		case "metadata":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Metadata = make(Metadata)
				} else {
					out.Metadata = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 string
					v2 = string(in.String())
					(out.Metadata)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "usage":
			if in.IsNull() {
				in.Skip()
				out.Usage = nil
			} else {
				if out.Usage == nil {
					out.Usage = new(Usage)
				}
				easyjson486f95b0DecodeGithubComOvhCdsSdk4(in, out.Usage)
			}
		case "history_length":
			out.HistoryLength = int64(in.Int64())
		case "purge_tags":
			if in.IsNull() {
				in.Skip()
				out.PurgeTags = nil
			} else {
				in.Delim('[')
				if out.PurgeTags == nil {
					if !in.IsDelim(']') {
						out.PurgeTags = make([]string, 0, 4)
					} else {
						out.PurgeTags = []string{}
					}
				} else {
					out.PurgeTags = (out.PurgeTags)[:0]
				}
				for !in.IsDelim(']') {
					var v3 string
					v3 = string(in.String())
					out.PurgeTags = append(out.PurgeTags, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "notifications":
			if in.IsNull() {
				in.Skip()
				out.Notifications = nil
			} else {
				in.Delim('[')
				if out.Notifications == nil {
					if !in.IsDelim(']') {
						out.Notifications = make([]WorkflowNotification, 0, 1)
					} else {
						out.Notifications = []WorkflowNotification{}
					}
				} else {
					out.Notifications = (out.Notifications)[:0]
				}
				for !in.IsDelim(']') {
					var v4 WorkflowNotification
					easyjson486f95b0DecodeGithubComOvhCdsSdk5(in, &v4)
					out.Notifications = append(out.Notifications, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "from_repository":
			out.FromRepository = string(in.String())
		case "derived_from_workflow_id":
			out.DerivedFromWorkflowID = int64(in.Int64())
		case "derived_from_workflow_name":
			out.DerivedFromWorkflowName = string(in.String())
		case "derivation_branch":
			out.DerivationBranch = string(in.String())
		case "audits":
			if in.IsNull() {
				in.Skip()
				out.Audits = nil
			} else {
				in.Delim('[')
				if out.Audits == nil {
					if !in.IsDelim(']') {
						out.Audits = make([]AuditWorkflow, 0, 1)
					} else {
						out.Audits = []AuditWorkflow{}
					}
				} else {
					out.Audits = (out.Audits)[:0]
				}
				for !in.IsDelim(']') {
					var v5 AuditWorkflow
					easyjson486f95b0DecodeGithubComOvhCdsSdk6(in, &v5)
					out.Audits = append(out.Audits, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pipelines":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Pipelines = make(map[int64]Pipeline)
				} else {
					out.Pipelines = nil
				}
				for !in.IsDelim('}') {
					key := int64(in.Int64Str())
					in.WantColon()
					var v6 Pipeline
					easyjson486f95b0DecodeGithubComOvhCdsSdk7(in, &v6)
					(out.Pipelines)[key] = v6
					in.WantComma()
				}
				in.Delim('}')
			}
		case "applications":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Applications = make(map[int64]Application)
				} else {
					out.Applications = nil
				}
				for !in.IsDelim('}') {
					key := int64(in.Int64Str())
					in.WantColon()
					var v7 Application
					easyjson486f95b0DecodeGithubComOvhCdsSdk8(in, &v7)
					(out.Applications)[key] = v7
					in.WantComma()
				}
				in.Delim('}')
			}
		case "environments":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Environments = make(map[int64]Environment)
				} else {
					out.Environments = nil
				}
				for !in.IsDelim('}') {
					key := int64(in.Int64Str())
					in.WantColon()
					var v8 Environment
					easyjson486f95b0DecodeGithubComOvhCdsSdk9(in, &v8)
					(out.Environments)[key] = v8
					in.WantComma()
				}
				in.Delim('}')
			}
		case "project_integrations":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ProjectIntegrations = make(map[int64]ProjectIntegration)
				} else {
					out.ProjectIntegrations = nil
				}
				for !in.IsDelim('}') {
					key := int64(in.Int64Str())
					in.WantColon()
					var v9 ProjectIntegration
					easyjson486f95b0DecodeGithubComOvhCdsSdk10(in, &v9)
					(out.ProjectIntegrations)[key] = v9
					in.WantComma()
				}
				in.Delim('}')
			}
		case "hook_models":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.HookModels = make(map[int64]WorkflowHookModel)
				} else {
					out.HookModels = nil
				}
				for !in.IsDelim('}') {
					key := int64(in.Int64Str())
					in.WantColon()
					var v10 WorkflowHookModel
					easyjson486f95b0DecodeGithubComOvhCdsSdk11(in, &v10)
					(out.HookModels)[key] = v10
					in.WantComma()
				}
				in.Delim('}')
			}
		case "outgoing_hook_models":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.OutGoingHookModels = make(map[int64]WorkflowHookModel)
				} else {
					out.OutGoingHookModels = nil
				}
				for !in.IsDelim('}') {
					key := int64(in.Int64Str())
					in.WantColon()
					var v11 WorkflowHookModel
					easyjson486f95b0DecodeGithubComOvhCdsSdk11(in, &v11)
					(out.OutGoingHookModels)[key] = v11
					in.WantComma()
				}
				in.Delim('}')
			}
		case "labels":
			if in.IsNull() {
				in.Skip()
				out.Labels = nil
			} else {
				in.Delim('[')
				if out.Labels == nil {
					if !in.IsDelim(']') {
						out.Labels = make([]Label, 0, 1)
					} else {
						out.Labels = []Label{}
					}
				} else {
					out.Labels = (out.Labels)[:0]
				}
				for !in.IsDelim(']') {
					var v12 Label
					easyjson486f95b0DecodeGithubComOvhCdsSdk12(in, &v12)
					out.Labels = append(out.Labels, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "to_delete":
			out.ToDelete = bool(in.Bool())
		case "favorite":
			out.Favorite = bool(in.Bool())
		case "workflow_data":
			if in.IsNull() {
				in.Skip()
				out.WorkflowData = nil
			} else {
				if out.WorkflowData == nil {
					out.WorkflowData = new(WorkflowData)
				}
				easyjson486f95b0DecodeGithubComOvhCdsSdk13(in, out.WorkflowData)
			}
		case "event_integrations":
			if in.IsNull() {
				in.Skip()
				out.EventIntegrations = nil
			} else {
				in.Delim('[')
				if out.EventIntegrations == nil {
					if !in.IsDelim(']') {
						out.EventIntegrations = make([]ProjectIntegration, 0, 1)
					} else {
						out.EventIntegrations = []ProjectIntegration{}
					}
				} else {
					out.EventIntegrations = (out.EventIntegrations)[:0]
				}
				for !in.IsDelim(']') {
					var v13 ProjectIntegration
					easyjson486f95b0DecodeGithubComOvhCdsSdk10(in, &v13)
					out.EventIntegrations = append(out.EventIntegrations, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "as_code_events":
			if in.IsNull() {
				in.Skip()
				out.AsCodeEvent = nil
			} else {
				in.Delim('[')
				if out.AsCodeEvent == nil {
					if !in.IsDelim(']') {
						out.AsCodeEvent = make([]AsCodeEvent, 0, 1)
					} else {
						out.AsCodeEvent = []AsCodeEvent{}
					}
				} else {
					out.AsCodeEvent = (out.AsCodeEvent)[:0]
				}
				for !in.IsDelim(']') {
					var v14 AsCodeEvent
					easyjson486f95b0DecodeGithubComOvhCdsSdk14(in, &v14)
					out.AsCodeEvent = append(out.AsCodeEvent, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "from_template":
			out.FromTemplate = string(in.String())
		case "template_up_to_date":
			out.TemplateUpToDate = bool(in.Bool())
		case "urls":
			easyjson486f95b0DecodeGithubComOvhCdsSdk15(in, &out.URLs)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk1(out *jwriter.Writer, in Workflow) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	if in.Icon != "" {
		const prefix string = ",\"icon\":"
		out.RawString(prefix)
		out.String(string(in.Icon))
	}
	{
		const prefix string = ",\"last_modified\":"
		out.RawString(prefix)
		out.Raw((in.LastModified).MarshalJSON())
	}
	if in.ProjectID != 0 {
		const prefix string = ",\"project_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.ProjectID))
	}
	{
		const prefix string = ",\"project_key\":"
		out.RawString(prefix)
		out.String(string(in.ProjectKey))
	}
	if len(in.Groups) != 0 {
		const prefix string = ",\"groups\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v15, v16 := range in.Groups {
				if v15 > 0 {
					out.RawByte(',')
				}
				easyjson486f95b0EncodeGithubComOvhCdsSdk2(out, v16)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"permissions\":"
		out.RawString(prefix)
		easyjson486f95b0EncodeGithubComOvhCdsSdk3(out, in.Permissions)
	}
	{
		const prefix string = ",\"metadata\":"
		out.RawString(prefix)
		if in.Metadata == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v17First := true
			for v17Name, v17Value := range in.Metadata {
				if v17First {
					v17First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v17Name))
				out.RawByte(':')
				out.String(string(v17Value))
			}
			out.RawByte('}')
		}
	}
	if in.Usage != nil {
		const prefix string = ",\"usage\":"
		out.RawString(prefix)
		easyjson486f95b0EncodeGithubComOvhCdsSdk4(out, *in.Usage)
	}
	{
		const prefix string = ",\"history_length\":"
		out.RawString(prefix)
		out.Int64(int64(in.HistoryLength))
	}
	if len(in.PurgeTags) != 0 {
		const prefix string = ",\"purge_tags\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v18, v19 := range in.PurgeTags {
				if v18 > 0 {
					out.RawByte(',')
				}
				out.String(string(v19))
			}
			out.RawByte(']')
		}
	}
	if len(in.Notifications) != 0 {
		const prefix string = ",\"notifications\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v20, v21 := range in.Notifications {
				if v20 > 0 {
					out.RawByte(',')
				}
				easyjson486f95b0EncodeGithubComOvhCdsSdk5(out, v21)
			}
			out.RawByte(']')
		}
	}
	if in.FromRepository != "" {
		const prefix string = ",\"from_repository\":"
		out.RawString(prefix)
		out.String(string(in.FromRepository))
	}
	if in.DerivedFromWorkflowID != 0 {
		const prefix string = ",\"derived_from_workflow_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.DerivedFromWorkflowID))
	}
	if in.DerivedFromWorkflowName != "" {
		const prefix string = ",\"derived_from_workflow_name\":"
		out.RawString(prefix)
		out.String(string(in.DerivedFromWorkflowName))
	}
	if in.DerivationBranch != "" {
		const prefix string = ",\"derivation_branch\":"
		out.RawString(prefix)
		out.String(string(in.DerivationBranch))
	}
	{
		const prefix string = ",\"audits\":"
		out.RawString(prefix)
		if in.Audits == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v22, v23 := range in.Audits {
				if v22 > 0 {
					out.RawByte(',')
				}
				easyjson486f95b0EncodeGithubComOvhCdsSdk6(out, v23)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"pipelines\":"
		out.RawString(prefix)
		if in.Pipelines == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v24First := true
			for v24Name, v24Value := range in.Pipelines {
				if v24First {
					v24First = false
				} else {
					out.RawByte(',')
				}
				out.Int64Str(int64(v24Name))
				out.RawByte(':')
				easyjson486f95b0EncodeGithubComOvhCdsSdk7(out, v24Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"applications\":"
		out.RawString(prefix)
		if in.Applications == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v25First := true
			for v25Name, v25Value := range in.Applications {
				if v25First {
					v25First = false
				} else {
					out.RawByte(',')
				}
				out.Int64Str(int64(v25Name))
				out.RawByte(':')
				easyjson486f95b0EncodeGithubComOvhCdsSdk8(out, v25Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"environments\":"
		out.RawString(prefix)
		if in.Environments == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v26First := true
			for v26Name, v26Value := range in.Environments {
				if v26First {
					v26First = false
				} else {
					out.RawByte(',')
				}
				out.Int64Str(int64(v26Name))
				out.RawByte(':')
				easyjson486f95b0EncodeGithubComOvhCdsSdk9(out, v26Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"project_integrations\":"
		out.RawString(prefix)
		if in.ProjectIntegrations == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v27First := true
			for v27Name, v27Value := range in.ProjectIntegrations {
				if v27First {
					v27First = false
				} else {
					out.RawByte(',')
				}
				out.Int64Str(int64(v27Name))
				out.RawByte(':')
				easyjson486f95b0EncodeGithubComOvhCdsSdk10(out, v27Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"hook_models\":"
		out.RawString(prefix)
		if in.HookModels == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v28First := true
			for v28Name, v28Value := range in.HookModels {
				if v28First {
					v28First = false
				} else {
					out.RawByte(',')
				}
				out.Int64Str(int64(v28Name))
				out.RawByte(':')
				easyjson486f95b0EncodeGithubComOvhCdsSdk11(out, v28Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"outgoing_hook_models\":"
		out.RawString(prefix)
		if in.OutGoingHookModels == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v29First := true
			for v29Name, v29Value := range in.OutGoingHookModels {
				if v29First {
					v29First = false
				} else {
					out.RawByte(',')
				}
				out.Int64Str(int64(v29Name))
				out.RawByte(':')
				easyjson486f95b0EncodeGithubComOvhCdsSdk11(out, v29Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"labels\":"
		out.RawString(prefix)
		if in.Labels == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v30, v31 := range in.Labels {
				if v30 > 0 {
					out.RawByte(',')
				}
				easyjson486f95b0EncodeGithubComOvhCdsSdk12(out, v31)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"to_delete\":"
		out.RawString(prefix)
		out.Bool(bool(in.ToDelete))
	}
	{
		const prefix string = ",\"favorite\":"
		out.RawString(prefix)
		out.Bool(bool(in.Favorite))
	}
	{
		const prefix string = ",\"workflow_data\":"
		out.RawString(prefix)
		if in.WorkflowData == nil {
			out.RawString("null")
		} else {
			easyjson486f95b0EncodeGithubComOvhCdsSdk13(out, *in.WorkflowData)
		}
	}
	{
		const prefix string = ",\"event_integrations\":"
		out.RawString(prefix)
		if in.EventIntegrations == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v32, v33 := range in.EventIntegrations {
				if v32 > 0 {
					out.RawByte(',')
				}
				easyjson486f95b0EncodeGithubComOvhCdsSdk10(out, v33)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"as_code_events\":"
		out.RawString(prefix)
		if in.AsCodeEvent == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v34, v35 := range in.AsCodeEvent {
				if v34 > 0 {
					out.RawByte(',')
				}
				easyjson486f95b0EncodeGithubComOvhCdsSdk14(out, v35)
			}
			out.RawByte(']')
		}
	}
	if in.FromTemplate != "" {
		const prefix string = ",\"from_template\":"
		out.RawString(prefix)
		out.String(string(in.FromTemplate))
	}
	if in.TemplateUpToDate {
		const prefix string = ",\"template_up_to_date\":"
		out.RawString(prefix)
		out.Bool(bool(in.TemplateUpToDate))
	}
	{
		const prefix string = ",\"urls\":"
		out.RawString(prefix)
		easyjson486f95b0EncodeGithubComOvhCdsSdk15(out, in.URLs)
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk15(in *jlexer.Lexer, out *URL) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "api_url":
			out.APIURL = string(in.String())
		case "ui_url":
			out.UIURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk15(out *jwriter.Writer, in URL) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"api_url\":"
		out.RawString(prefix[1:])
		out.String(string(in.APIURL))
	}
	{
		const prefix string = ",\"ui_url\":"
		out.RawString(prefix)
		out.String(string(in.UIURL))
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk14(in *jlexer.Lexer, out *AsCodeEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "pullrequest_id":
			out.PullRequestID = int64(in.Int64())
		case "pullrequest_url":
			out.PullRequestURL = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "creation_date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreateDate).UnmarshalJSON(data))
			}
		case "from_repository":
			out.FromRepo = string(in.String())
		case "data":
			easyjson486f95b0DecodeGithubComOvhCdsSdk16(in, &out.Data)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk14(out *jwriter.Writer, in AsCodeEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"pullrequest_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.PullRequestID))
	}
	{
		const prefix string = ",\"pullrequest_url\":"
		out.RawString(prefix)
		out.String(string(in.PullRequestURL))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"creation_date\":"
		out.RawString(prefix)
		out.Raw((in.CreateDate).MarshalJSON())
	}
	{
		const prefix string = ",\"from_repository\":"
		out.RawString(prefix)
		out.String(string(in.FromRepo))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		easyjson486f95b0EncodeGithubComOvhCdsSdk16(out, in.Data)
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk16(in *jlexer.Lexer, out *AsCodeEventData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "workflows":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Workflows = make(AsCodeEventDataValue)
				} else {
					out.Workflows = nil
				}
				for !in.IsDelim('}') {
					key := int64(in.Int64Str())
					in.WantColon()
					var v36 string
					v36 = string(in.String())
					(out.Workflows)[key] = v36
					in.WantComma()
				}
				in.Delim('}')
			}
		case "pipelines":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Pipelines = make(AsCodeEventDataValue)
				} else {
					out.Pipelines = nil
				}
				for !in.IsDelim('}') {
					key := int64(in.Int64Str())
					in.WantColon()
					var v37 string
					v37 = string(in.String())
					(out.Pipelines)[key] = v37
					in.WantComma()
				}
				in.Delim('}')
			}
		case "applications":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Applications = make(AsCodeEventDataValue)
				} else {
					out.Applications = nil
				}
				for !in.IsDelim('}') {
					key := int64(in.Int64Str())
					in.WantColon()
					var v38 string
					v38 = string(in.String())
					(out.Applications)[key] = v38
					in.WantComma()
				}
				in.Delim('}')
			}
		case "environments":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Environments = make(AsCodeEventDataValue)
				} else {
					out.Environments = nil
				}
				for !in.IsDelim('}') {
					key := int64(in.Int64Str())
					in.WantColon()
					var v39 string
					v39 = string(in.String())
					(out.Environments)[key] = v39
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk16(out *jwriter.Writer, in AsCodeEventData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"workflows\":"
		out.RawString(prefix[1:])
		if in.Workflows == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v40First := true
			for v40Name, v40Value := range in.Workflows {
				if v40First {
					v40First = false
				} else {
					out.RawByte(',')
				}
				out.Int64Str(int64(v40Name))
				out.RawByte(':')
				out.String(string(v40Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"pipelines\":"
		out.RawString(prefix)
		if in.Pipelines == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v41First := true
			for v41Name, v41Value := range in.Pipelines {
				if v41First {
					v41First = false
				} else {
					out.RawByte(',')
				}
				out.Int64Str(int64(v41Name))
				out.RawByte(':')
				out.String(string(v41Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"applications\":"
		out.RawString(prefix)
		if in.Applications == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v42First := true
			for v42Name, v42Value := range in.Applications {
				if v42First {
					v42First = false
				} else {
					out.RawByte(',')
				}
				out.Int64Str(int64(v42Name))
				out.RawByte(':')
				out.String(string(v42Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"environments\":"
		out.RawString(prefix)
		if in.Environments == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v43First := true
			for v43Name, v43Value := range in.Environments {
				if v43First {
					v43First = false
				} else {
					out.RawByte(',')
				}
				out.Int64Str(int64(v43Name))
				out.RawByte(':')
				out.String(string(v43Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk13(in *jlexer.Lexer, out *WorkflowData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "node":
			easyjson486f95b0DecodeGithubComOvhCdsSdk17(in, &out.Node)
		case "joins":
			if in.IsNull() {
				in.Skip()
				out.Joins = nil
			} else {
				in.Delim('[')
				if out.Joins == nil {
					if !in.IsDelim(']') {
						out.Joins = make([]Node, 0, 1)
					} else {
						out.Joins = []Node{}
					}
				} else {
					out.Joins = (out.Joins)[:0]
				}
				for !in.IsDelim(']') {
					var v44 Node
					easyjson486f95b0DecodeGithubComOvhCdsSdk17(in, &v44)
					out.Joins = append(out.Joins, v44)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk13(out *jwriter.Writer, in WorkflowData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"node\":"
		out.RawString(prefix[1:])
		easyjson486f95b0EncodeGithubComOvhCdsSdk17(out, in.Node)
	}
	{
		const prefix string = ",\"joins\":"
		out.RawString(prefix)
		if in.Joins == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v45, v46 := range in.Joins {
				if v45 > 0 {
					out.RawByte(',')
				}
				easyjson486f95b0EncodeGithubComOvhCdsSdk17(out, v46)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk17(in *jlexer.Lexer, out *Node) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "workflow_id":
			out.WorkflowID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "ref":
			out.Ref = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "triggers":
			if in.IsNull() {
				in.Skip()
				out.Triggers = nil
			} else {
				in.Delim('[')
				if out.Triggers == nil {
					if !in.IsDelim(']') {
						out.Triggers = make([]NodeTrigger, 0, 1)
					} else {
						out.Triggers = []NodeTrigger{}
					}
				} else {
					out.Triggers = (out.Triggers)[:0]
				}
				for !in.IsDelim(']') {
					var v47 NodeTrigger
					easyjson486f95b0DecodeGithubComOvhCdsSdk18(in, &v47)
					out.Triggers = append(out.Triggers, v47)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "context":
			if in.IsNull() {
				in.Skip()
				out.Context = nil
			} else {
				if out.Context == nil {
					out.Context = new(NodeContext)
				}
				easyjson486f95b0DecodeGithubComOvhCdsSdk19(in, out.Context)
			}
		case "outgoing_hook":
			if in.IsNull() {
				in.Skip()
				out.OutGoingHookContext = nil
			} else {
				if out.OutGoingHookContext == nil {
					out.OutGoingHookContext = new(NodeOutGoingHook)
				}
				easyjson486f95b0DecodeGithubComOvhCdsSdk20(in, out.OutGoingHookContext)
			}
		case "parents":
			if in.IsNull() {
				in.Skip()
				out.JoinContext = nil
			} else {
				in.Delim('[')
				if out.JoinContext == nil {
					if !in.IsDelim(']') {
						out.JoinContext = make([]NodeJoin, 0, 1)
					} else {
						out.JoinContext = []NodeJoin{}
					}
				} else {
					out.JoinContext = (out.JoinContext)[:0]
				}
				for !in.IsDelim(']') {
					var v48 NodeJoin
					easyjson486f95b0DecodeGithubComOvhCdsSdk21(in, &v48)
					out.JoinContext = append(out.JoinContext, v48)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "hooks":
			if in.IsNull() {
				in.Skip()
				out.Hooks = nil
			} else {
				in.Delim('[')
				if out.Hooks == nil {
					if !in.IsDelim(']') {
						out.Hooks = make([]NodeHook, 0, 1)
					} else {
						out.Hooks = []NodeHook{}
					}
				} else {
					out.Hooks = (out.Hooks)[:0]
				}
				for !in.IsDelim(']') {
					var v49 NodeHook
					easyjson486f95b0DecodeGithubComOvhCdsSdk22(in, &v49)
					out.Hooks = append(out.Hooks, v49)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "groups":
			if in.IsNull() {
				in.Skip()
				out.Groups = nil
			} else {
				in.Delim('[')
				if out.Groups == nil {
					if !in.IsDelim(']') {
						out.Groups = make([]GroupPermission, 0, 1)
					} else {
						out.Groups = []GroupPermission{}
					}
				} else {
					out.Groups = (out.Groups)[:0]
				}
				for !in.IsDelim(']') {
					var v50 GroupPermission
					easyjson486f95b0DecodeGithubComOvhCdsSdk2(in, &v50)
					out.Groups = append(out.Groups, v50)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk17(out *jwriter.Writer, in Node) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"workflow_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.WorkflowID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"ref\":"
		out.RawString(prefix)
		out.String(string(in.Ref))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"triggers\":"
		out.RawString(prefix)
		if in.Triggers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v51, v52 := range in.Triggers {
				if v51 > 0 {
					out.RawByte(',')
				}
				easyjson486f95b0EncodeGithubComOvhCdsSdk18(out, v52)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"context\":"
		out.RawString(prefix)
		if in.Context == nil {
			out.RawString("null")
		} else {
			easyjson486f95b0EncodeGithubComOvhCdsSdk19(out, *in.Context)
		}
	}
	{
		const prefix string = ",\"outgoing_hook\":"
		out.RawString(prefix)
		if in.OutGoingHookContext == nil {
			out.RawString("null")
		} else {
			easyjson486f95b0EncodeGithubComOvhCdsSdk20(out, *in.OutGoingHookContext)
		}
	}
	{
		const prefix string = ",\"parents\":"
		out.RawString(prefix)
		if in.JoinContext == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v53, v54 := range in.JoinContext {
				if v53 > 0 {
					out.RawByte(',')
				}
				easyjson486f95b0EncodeGithubComOvhCdsSdk21(out, v54)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"hooks\":"
		out.RawString(prefix)
		if in.Hooks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v55, v56 := range in.Hooks {
				if v55 > 0 {
					out.RawByte(',')
				}
				easyjson486f95b0EncodeGithubComOvhCdsSdk22(out, v56)
			}
			out.RawByte(']')
		}
	}
	if len(in.Groups) != 0 {
		const prefix string = ",\"groups\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v57, v58 := range in.Groups {
				if v57 > 0 {
					out.RawByte(',')
				}
				easyjson486f95b0EncodeGithubComOvhCdsSdk2(out, v58)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk22(in *jlexer.Lexer, out *NodeHook) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "uuid":
			out.UUID = string(in.String())
		case "ref":
			out.Ref = string(in.String())
		case "node_id":
			out.NodeID = int64(in.Int64())
		case "hook_model_id":
			out.HookModelID = int64(in.Int64())
		case "hook_model_name":
			out.HookModelName = string(in.String())
		case "config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Config = make(WorkflowNodeHookConfig)
				} else {
					out.Config = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v59 WorkflowNodeHookConfigValue
					easyjson486f95b0DecodeGithubComOvhCdsSdk23(in, &v59)
					(out.Config)[key] = v59
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk22(out *jwriter.Writer, in NodeHook) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"uuid\":"
		out.RawString(prefix)
		out.String(string(in.UUID))
	}
	{
		const prefix string = ",\"ref\":"
		out.RawString(prefix)
		out.String(string(in.Ref))
	}
	{
		const prefix string = ",\"node_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.NodeID))
	}
	{
		const prefix string = ",\"hook_model_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.HookModelID))
	}
	{
		const prefix string = ",\"hook_model_name\":"
		out.RawString(prefix)
		out.String(string(in.HookModelName))
	}
	{
		const prefix string = ",\"config\":"
		out.RawString(prefix)
		if in.Config == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v60First := true
			for v60Name, v60Value := range in.Config {
				if v60First {
					v60First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v60Name))
				out.RawByte(':')
				easyjson486f95b0EncodeGithubComOvhCdsSdk23(out, v60Value)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk23(in *jlexer.Lexer, out *WorkflowNodeHookConfigValue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = string(in.String())
		case "configurable":
			out.Configurable = bool(in.Bool())
		case "type":
			out.Type = string(in.String())
		case "multiple_choice_list":
			if in.IsNull() {
				in.Skip()
				out.MultipleChoiceList = nil
			} else {
				in.Delim('[')
				if out.MultipleChoiceList == nil {
					if !in.IsDelim(']') {
						out.MultipleChoiceList = make([]string, 0, 4)
					} else {
						out.MultipleChoiceList = []string{}
					}
				} else {
					out.MultipleChoiceList = (out.MultipleChoiceList)[:0]
				}
				for !in.IsDelim(']') {
					var v61 string
					v61 = string(in.String())
					out.MultipleChoiceList = append(out.MultipleChoiceList, v61)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk23(out *jwriter.Writer, in WorkflowNodeHookConfigValue) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix[1:])
		out.String(string(in.Value))
	}
	{
		const prefix string = ",\"configurable\":"
		out.RawString(prefix)
		out.Bool(bool(in.Configurable))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"multiple_choice_list\":"
		out.RawString(prefix)
		if in.MultipleChoiceList == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v62, v63 := range in.MultipleChoiceList {
				if v62 > 0 {
					out.RawByte(',')
				}
				out.String(string(v63))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk21(in *jlexer.Lexer, out *NodeJoin) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "node_id":
			out.NodeID = int64(in.Int64())
		case "parent_name":
			out.ParentName = string(in.String())
		case "parent_id":
			out.ParentID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk21(out *jwriter.Writer, in NodeJoin) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"node_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.NodeID))
	}
	if in.ParentName != "" {
		const prefix string = ",\"parent_name\":"
		out.RawString(prefix)
		out.String(string(in.ParentName))
	}
	if in.ParentID != 0 {
		const prefix string = ",\"parent_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.ParentID))
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk20(in *jlexer.Lexer, out *NodeOutGoingHook) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "node_id":
			out.NodeID = int64(in.Int64())
		case "hook_model_id":
			out.HookModelID = int64(in.Int64())
		case "config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Config = make(WorkflowNodeHookConfig)
				} else {
					out.Config = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v64 WorkflowNodeHookConfigValue
					easyjson486f95b0DecodeGithubComOvhCdsSdk23(in, &v64)
					(out.Config)[key] = v64
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk20(out *jwriter.Writer, in NodeOutGoingHook) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"node_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.NodeID))
	}
	{
		const prefix string = ",\"hook_model_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.HookModelID))
	}
	{
		const prefix string = ",\"config\":"
		out.RawString(prefix)
		if in.Config == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v65First := true
			for v65Name, v65Value := range in.Config {
				if v65First {
					v65First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v65Name))
				out.RawByte(':')
				easyjson486f95b0EncodeGithubComOvhCdsSdk23(out, v65Value)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk19(in *jlexer.Lexer, out *NodeContext) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "node_id":
			out.NodeID = int64(in.Int64())
		case "pipeline_id":
			out.PipelineID = int64(in.Int64())
		case "application_id":
			out.ApplicationID = int64(in.Int64())
		case "environment_id":
			out.EnvironmentID = int64(in.Int64())
		case "project_integration_id":
			out.ProjectIntegrationID = int64(in.Int64())
		case "default_payload":
			if m, ok := out.DefaultPayload.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.DefaultPayload.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.DefaultPayload = in.Interface()
			}
		case "default_pipeline_parameters":
			if in.IsNull() {
				in.Skip()
				out.DefaultPipelineParameters = nil
			} else {
				in.Delim('[')
				if out.DefaultPipelineParameters == nil {
					if !in.IsDelim(']') {
						out.DefaultPipelineParameters = make([]Parameter, 0, 1)
					} else {
						out.DefaultPipelineParameters = []Parameter{}
					}
				} else {
					out.DefaultPipelineParameters = (out.DefaultPipelineParameters)[:0]
				}
				for !in.IsDelim(']') {
					var v66 Parameter
					easyjson486f95b0DecodeGithubComOvhCdsSdk24(in, &v66)
					out.DefaultPipelineParameters = append(out.DefaultPipelineParameters, v66)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "conditions":
			easyjson486f95b0DecodeGithubComOvhCdsSdk25(in, &out.Conditions)
		case "mutex":
			out.Mutex = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk19(out *jwriter.Writer, in NodeContext) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"node_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.NodeID))
	}
	{
		const prefix string = ",\"pipeline_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.PipelineID))
	}
	{
		const prefix string = ",\"application_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.ApplicationID))
	}
	{
		const prefix string = ",\"environment_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.EnvironmentID))
	}
	{
		const prefix string = ",\"project_integration_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.ProjectIntegrationID))
	}
	if in.DefaultPayload != nil {
		const prefix string = ",\"default_payload\":"
		out.RawString(prefix)
		if m, ok := in.DefaultPayload.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.DefaultPayload.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.DefaultPayload))
		}
	}
	{
		const prefix string = ",\"default_pipeline_parameters\":"
		out.RawString(prefix)
		if in.DefaultPipelineParameters == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v67, v68 := range in.DefaultPipelineParameters {
				if v67 > 0 {
					out.RawByte(',')
				}
				easyjson486f95b0EncodeGithubComOvhCdsSdk24(out, v68)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"conditions\":"
		out.RawString(prefix)
		easyjson486f95b0EncodeGithubComOvhCdsSdk25(out, in.Conditions)
	}
	{
		const prefix string = ",\"mutex\":"
		out.RawString(prefix)
		out.Bool(bool(in.Mutex))
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk25(in *jlexer.Lexer, out *WorkflowNodeConditions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "plain":
			if in.IsNull() {
				in.Skip()
				out.PlainConditions = nil
			} else {
				in.Delim('[')
				if out.PlainConditions == nil {
					if !in.IsDelim(']') {
						out.PlainConditions = make([]WorkflowNodeCondition, 0, 1)
					} else {
						out.PlainConditions = []WorkflowNodeCondition{}
					}
				} else {
					out.PlainConditions = (out.PlainConditions)[:0]
				}
				for !in.IsDelim(']') {
					var v69 WorkflowNodeCondition
					easyjson486f95b0DecodeGithubComOvhCdsSdk26(in, &v69)
					out.PlainConditions = append(out.PlainConditions, v69)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "lua_script":
			out.LuaScript = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk25(out *jwriter.Writer, in WorkflowNodeConditions) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.PlainConditions) != 0 {
		const prefix string = ",\"plain\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v70, v71 := range in.PlainConditions {
				if v70 > 0 {
					out.RawByte(',')
				}
				easyjson486f95b0EncodeGithubComOvhCdsSdk26(out, v71)
			}
			out.RawByte(']')
		}
	}
	if in.LuaScript != "" {
		const prefix string = ",\"lua_script\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LuaScript))
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk26(in *jlexer.Lexer, out *WorkflowNodeCondition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "variable":
			out.Variable = string(in.String())
		case "operator":
			out.Operator = string(in.String())
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk26(out *jwriter.Writer, in WorkflowNodeCondition) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"variable\":"
		out.RawString(prefix[1:])
		out.String(string(in.Variable))
	}
	{
		const prefix string = ",\"operator\":"
		out.RawString(prefix)
		out.String(string(in.Operator))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk24(in *jlexer.Lexer, out *Parameter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "value":
			out.Value = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "advanced":
			out.Advanced = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk24(out *jwriter.Writer, in Parameter) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	if in.Advanced {
		const prefix string = ",\"advanced\":"
		out.RawString(prefix)
		out.Bool(bool(in.Advanced))
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk18(in *jlexer.Lexer, out *NodeTrigger) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "parent_node_id":
			out.ParentNodeID = int64(in.Int64())
		case "child_node_id":
			out.ChildNodeID = int64(in.Int64())
		case "parent_node_name":
			out.ParentNodeName = string(in.String())
		case "child_node":
			easyjson486f95b0DecodeGithubComOvhCdsSdk17(in, &out.ChildNode)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk18(out *jwriter.Writer, in NodeTrigger) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"parent_node_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.ParentNodeID))
	}
	{
		const prefix string = ",\"child_node_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.ChildNodeID))
	}
	{
		const prefix string = ",\"parent_node_name\":"
		out.RawString(prefix)
		out.String(string(in.ParentNodeName))
	}
	{
		const prefix string = ",\"child_node\":"
		out.RawString(prefix)
		easyjson486f95b0EncodeGithubComOvhCdsSdk17(out, in.ChildNode)
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk12(in *jlexer.Lexer, out *Label) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "color":
			out.Color = string(in.String())
		case "project_id":
			out.ProjectID = int64(in.Int64())
		case "workflow_id":
			out.WorkflowID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk12(out *jwriter.Writer, in Label) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"color\":"
		out.RawString(prefix)
		out.String(string(in.Color))
	}
	{
		const prefix string = ",\"project_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.ProjectID))
	}
	if in.WorkflowID != 0 {
		const prefix string = ",\"workflow_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.WorkflowID))
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk11(in *jlexer.Lexer, out *WorkflowHookModel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "author":
			out.Author = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "identifier":
			out.Identifier = string(in.String())
		case "icon":
			out.Icon = string(in.String())
		case "command":
			out.Command = string(in.String())
		case "default_config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.DefaultConfig = make(WorkflowNodeHookConfig)
				} else {
					out.DefaultConfig = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v72 WorkflowNodeHookConfigValue
					easyjson486f95b0DecodeGithubComOvhCdsSdk23(in, &v72)
					(out.DefaultConfig)[key] = v72
					in.WantComma()
				}
				in.Delim('}')
			}
		case "disabled":
			out.Disabled = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk11(out *jwriter.Writer, in WorkflowHookModel) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		out.String(string(in.Author))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"identifier\":"
		out.RawString(prefix)
		out.String(string(in.Identifier))
	}
	{
		const prefix string = ",\"icon\":"
		out.RawString(prefix)
		out.String(string(in.Icon))
	}
	{
		const prefix string = ",\"command\":"
		out.RawString(prefix)
		out.String(string(in.Command))
	}
	{
		const prefix string = ",\"default_config\":"
		out.RawString(prefix)
		if in.DefaultConfig == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v73First := true
			for v73Name, v73Value := range in.DefaultConfig {
				if v73First {
					v73First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v73Name))
				out.RawByte(':')
				easyjson486f95b0EncodeGithubComOvhCdsSdk23(out, v73Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"disabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.Disabled))
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk10(in *jlexer.Lexer, out *ProjectIntegration) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "project_id":
			out.ProjectID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "integration_model_id":
			out.IntegrationModelID = int64(in.Int64())
		case "model":
			easyjson486f95b0DecodeGithubComOvhCdsSdk27(in, &out.Model)
		case "config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Config = make(IntegrationConfig)
				} else {
					out.Config = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v74 IntegrationConfigValue
					easyjson486f95b0DecodeGithubComOvhCdsSdk28(in, &v74)
					(out.Config)[key] = v74
					in.WantComma()
				}
				in.Delim('}')
			}
		case "integration_plugins":
			if in.IsNull() {
				in.Skip()
				out.GRPCPlugins = nil
			} else {
				in.Delim('[')
				if out.GRPCPlugins == nil {
					if !in.IsDelim(']') {
						out.GRPCPlugins = make([]GRPCPlugin, 0, 1)
					} else {
						out.GRPCPlugins = []GRPCPlugin{}
					}
				} else {
					out.GRPCPlugins = (out.GRPCPlugins)[:0]
				}
				for !in.IsDelim(']') {
					var v75 GRPCPlugin
					easyjson486f95b0DecodeGithubComOvhCdsSdk29(in, &v75)
					out.GRPCPlugins = append(out.GRPCPlugins, v75)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk10(out *jwriter.Writer, in ProjectIntegration) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"project_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.ProjectID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"integration_model_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.IntegrationModelID))
	}
	{
		const prefix string = ",\"model\":"
		out.RawString(prefix)
		easyjson486f95b0EncodeGithubComOvhCdsSdk27(out, in.Model)
	}
	{
		const prefix string = ",\"config\":"
		out.RawString(prefix)
		if in.Config == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v76First := true
			for v76Name, v76Value := range in.Config {
				if v76First {
					v76First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v76Name))
				out.RawByte(':')
				easyjson486f95b0EncodeGithubComOvhCdsSdk28(out, v76Value)
			}
			out.RawByte('}')
		}
	}
	if len(in.GRPCPlugins) != 0 {
		const prefix string = ",\"integration_plugins\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v77, v78 := range in.GRPCPlugins {
				if v77 > 0 {
					out.RawByte(',')
				}
				easyjson486f95b0EncodeGithubComOvhCdsSdk29(out, v78)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk29(in *jlexer.Lexer, out *GRPCPlugin) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "author":
			out.Author = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "parameters":
			if in.IsNull() {
				in.Skip()
				out.Parameters = nil
			} else {
				in.Delim('[')
				if out.Parameters == nil {
					if !in.IsDelim(']') {
						out.Parameters = make([]Parameter, 0, 1)
					} else {
						out.Parameters = []Parameter{}
					}
				} else {
					out.Parameters = (out.Parameters)[:0]
				}
				for !in.IsDelim(']') {
					var v79 Parameter
					easyjson486f95b0DecodeGithubComOvhCdsSdk24(in, &v79)
					out.Parameters = append(out.Parameters, v79)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "binaries":
			if in.IsNull() {
				in.Skip()
				out.Binaries = nil
			} else {
				in.Delim('[')
				if out.Binaries == nil {
					if !in.IsDelim(']') {
						out.Binaries = make([]GRPCPluginBinary, 0, 1)
					} else {
						out.Binaries = []GRPCPluginBinary{}
					}
				} else {
					out.Binaries = (out.Binaries)[:0]
				}
				for !in.IsDelim(']') {
					var v80 GRPCPluginBinary
					easyjson486f95b0DecodeGithubComOvhCdsSdk30(in, &v80)
					out.Binaries = append(out.Binaries, v80)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "integration":
			out.Integration = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk29(out *jwriter.Writer, in GRPCPlugin) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		out.String(string(in.Author))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	if len(in.Parameters) != 0 {
		const prefix string = ",\"parameters\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v81, v82 := range in.Parameters {
				if v81 > 0 {
					out.RawByte(',')
				}
				easyjson486f95b0EncodeGithubComOvhCdsSdk24(out, v82)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"binaries\":"
		out.RawString(prefix)
		if in.Binaries == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v83, v84 := range in.Binaries {
				if v83 > 0 {
					out.RawByte(',')
				}
				easyjson486f95b0EncodeGithubComOvhCdsSdk30(out, v84)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"integration\":"
		out.RawString(prefix)
		out.String(string(in.Integration))
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk30(in *jlexer.Lexer, out *GRPCPluginBinary) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "os":
			out.OS = string(in.String())
		case "arch":
			out.Arch = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "object_path":
			out.ObjectPath = string(in.String())
		case "size":
			out.Size = int64(in.Int64())
		case "perm":
			out.Perm = uint32(in.Uint32())
		case "md5sum":
			out.MD5sum = string(in.String())
		case "sha512sum":
			out.SHA512sum = string(in.String())
		case "temp_url":
			out.TempURL = string(in.String())
		case "entrypoints":
			if in.IsNull() {
				in.Skip()
				out.Entrypoints = nil
			} else {
				in.Delim('[')
				if out.Entrypoints == nil {
					if !in.IsDelim(']') {
						out.Entrypoints = make([]string, 0, 4)
					} else {
						out.Entrypoints = []string{}
					}
				} else {
					out.Entrypoints = (out.Entrypoints)[:0]
				}
				for !in.IsDelim(']') {
					var v85 string
					v85 = string(in.String())
					out.Entrypoints = append(out.Entrypoints, v85)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "cmd":
			out.Cmd = string(in.String())
		case "args":
			if in.IsNull() {
				in.Skip()
				out.Args = nil
			} else {
				in.Delim('[')
				if out.Args == nil {
					if !in.IsDelim(']') {
						out.Args = make([]string, 0, 4)
					} else {
						out.Args = []string{}
					}
				} else {
					out.Args = (out.Args)[:0]
				}
				for !in.IsDelim(']') {
					var v86 string
					v86 = string(in.String())
					out.Args = append(out.Args, v86)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "requirements":
			if in.IsNull() {
				in.Skip()
				out.Requirements = nil
			} else {
				in.Delim('[')
				if out.Requirements == nil {
					if !in.IsDelim(']') {
						out.Requirements = make(RequirementList, 0, 1)
					} else {
						out.Requirements = RequirementList{}
					}
				} else {
					out.Requirements = (out.Requirements)[:0]
				}
				for !in.IsDelim(']') {
					var v87 Requirement
					easyjson486f95b0DecodeGithubComOvhCdsSdk31(in, &v87)
					out.Requirements = append(out.Requirements, v87)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "file_content":
			if in.IsNull() {
				in.Skip()
				out.FileContent = nil
			} else {
				out.FileContent = in.Bytes()
			}
		case "plugin_name":
			out.PluginName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk30(out *jwriter.Writer, in GRPCPluginBinary) {
	out.RawByte('{')
	first := true
	_ = first
	if in.OS != "" {
		const prefix string = ",\"os\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.OS))
	}
	if in.Arch != "" {
		const prefix string = ",\"arch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Arch))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.ObjectPath != "" {
		const prefix string = ",\"object_path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ObjectPath))
	}
	if in.Size != 0 {
		const prefix string = ",\"size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Size))
	}
	if in.Perm != 0 {
		const prefix string = ",\"perm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Perm))
	}
	if in.MD5sum != "" {
		const prefix string = ",\"md5sum\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MD5sum))
	}
	if in.SHA512sum != "" {
		const prefix string = ",\"sha512sum\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SHA512sum))
	}
	if in.TempURL != "" {
		const prefix string = ",\"temp_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TempURL))
	}
	if len(in.Entrypoints) != 0 {
		const prefix string = ",\"entrypoints\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v89, v90 := range in.Entrypoints {
				if v89 > 0 {
					out.RawByte(',')
				}
				out.String(string(v90))
			}
			out.RawByte(']')
		}
	}
	if in.Cmd != "" {
		const prefix string = ",\"cmd\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Cmd))
	}
	if len(in.Args) != 0 {
		const prefix string = ",\"args\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v91, v92 := range in.Args {
				if v91 > 0 {
					out.RawByte(',')
				}
				out.String(string(v92))
			}
			out.RawByte(']')
		}
	}
	if len(in.Requirements) != 0 {
		const prefix string = ",\"requirements\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v93, v94 := range in.Requirements {
				if v93 > 0 {
					out.RawByte(',')
				}
				easyjson486f95b0EncodeGithubComOvhCdsSdk31(out, v94)
			}
			out.RawByte(']')
		}
	}
	if len(in.FileContent) != 0 {
		const prefix string = ",\"file_content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.FileContent)
	}
	if in.PluginName != "" {
		const prefix string = ",\"plugin_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PluginName))
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk31(in *jlexer.Lexer, out *Requirement) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "action_id":
			out.ActionID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk31(out *jwriter.Writer, in Requirement) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"action_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.ActionID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk28(in *jlexer.Lexer, out *IntegrationConfigValue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "description":
			out.Description = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk28(out *jwriter.Writer, in IntegrationConfigValue) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix[1:])
		out.String(string(in.Value))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk27(in *jlexer.Lexer, out *IntegrationModel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "author":
			out.Author = string(in.String())
		case "identifier":
			out.Identifier = string(in.String())
		case "icon":
			out.Icon = string(in.String())
		case "default_config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.DefaultConfig = make(IntegrationConfig)
				} else {
					out.DefaultConfig = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v97 IntegrationConfigValue
					easyjson486f95b0DecodeGithubComOvhCdsSdk28(in, &v97)
					(out.DefaultConfig)[key] = v97
					in.WantComma()
				}
				in.Delim('}')
			}
		case "deployment_default_config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.DeploymentDefaultConfig = make(IntegrationConfig)
				} else {
					out.DeploymentDefaultConfig = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v98 IntegrationConfigValue
					easyjson486f95b0DecodeGithubComOvhCdsSdk28(in, &v98)
					(out.DeploymentDefaultConfig)[key] = v98
					in.WantComma()
				}
				in.Delim('}')
			}
		case "public_configurations":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.PublicConfigurations = make(map[string]IntegrationConfig)
				} else {
					out.PublicConfigurations = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v99 IntegrationConfig
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						if !in.IsDelim('}') {
							v99 = make(IntegrationConfig)
						} else {
							v99 = nil
						}
						for !in.IsDelim('}') {
							key := string(in.String())
							in.WantColon()
							var v100 IntegrationConfigValue
							easyjson486f95b0DecodeGithubComOvhCdsSdk28(in, &v100)
							(v99)[key] = v100
							in.WantComma()
						}
						in.Delim('}')
					}
					(out.PublicConfigurations)[key] = v99
					in.WantComma()
				}
				in.Delim('}')
			}
		case "disabled":
			out.Disabled = bool(in.Bool())
		case "hook":
			out.Hook = bool(in.Bool())
		case "storage":
			out.Storage = bool(in.Bool())
		case "deployment":
			out.Deployment = bool(in.Bool())
		case "compute":
			out.Compute = bool(in.Bool())
		case "event":
			out.Event = bool(in.Bool())
		case "public":
			out.Public = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk27(out *jwriter.Writer, in IntegrationModel) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		out.String(string(in.Author))
	}
	{
		const prefix string = ",\"identifier\":"
		out.RawString(prefix)
		out.String(string(in.Identifier))
	}
	{
		const prefix string = ",\"icon\":"
		out.RawString(prefix)
		out.String(string(in.Icon))
	}
	{
		const prefix string = ",\"default_config\":"
		out.RawString(prefix)
		if in.DefaultConfig == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v101First := true
			for v101Name, v101Value := range in.DefaultConfig {
				if v101First {
					v101First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v101Name))
				out.RawByte(':')
				easyjson486f95b0EncodeGithubComOvhCdsSdk28(out, v101Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"deployment_default_config\":"
		out.RawString(prefix)
		if in.DeploymentDefaultConfig == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v102First := true
			for v102Name, v102Value := range in.DeploymentDefaultConfig {
				if v102First {
					v102First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v102Name))
				out.RawByte(':')
				easyjson486f95b0EncodeGithubComOvhCdsSdk28(out, v102Value)
			}
			out.RawByte('}')
		}
	}
	if len(in.PublicConfigurations) != 0 {
		const prefix string = ",\"public_configurations\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v103First := true
			for v103Name, v103Value := range in.PublicConfigurations {
				if v103First {
					v103First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v103Name))
				out.RawByte(':')
				if v103Value == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v104First := true
					for v104Name, v104Value := range v103Value {
						if v104First {
							v104First = false
						} else {
							out.RawByte(',')
						}
						out.String(string(v104Name))
						out.RawByte(':')
						easyjson486f95b0EncodeGithubComOvhCdsSdk28(out, v104Value)
					}
					out.RawByte('}')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"disabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.Disabled))
	}
	{
		const prefix string = ",\"hook\":"
		out.RawString(prefix)
		out.Bool(bool(in.Hook))
	}
	{
		const prefix string = ",\"storage\":"
		out.RawString(prefix)
		out.Bool(bool(in.Storage))
	}
	{
		const prefix string = ",\"deployment\":"
		out.RawString(prefix)
		out.Bool(bool(in.Deployment))
	}
	{
		const prefix string = ",\"compute\":"
		out.RawString(prefix)
		out.Bool(bool(in.Compute))
	}
	{
		const prefix string = ",\"event\":"
		out.RawString(prefix)
		out.Bool(bool(in.Event))
	}
	if in.Public {
		const prefix string = ",\"public\":"
		out.RawString(prefix)
		out.Bool(bool(in.Public))
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk9(in *jlexer.Lexer, out *Environment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "variables":
			if in.IsNull() {
				in.Skip()
				out.Variable = nil
			} else {
				in.Delim('[')
				if out.Variable == nil {
					if !in.IsDelim(']') {
						out.Variable = make([]Variable, 0, 1)
					} else {
						out.Variable = []Variable{}
					}
				} else {
					out.Variable = (out.Variable)[:0]
				}
				for !in.IsDelim(']') {
					var v105 Variable
					easyjson486f95b0DecodeGithubComOvhCdsSdk32(in, &v105)
					out.Variable = append(out.Variable, v105)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "project_key":
			out.ProjectKey = string(in.String())
		case "last_modified":
			out.LastModified = int64(in.Int64())
		case "keys":
			if in.IsNull() {
				in.Skip()
				out.Keys = nil
			} else {
				in.Delim('[')
				if out.Keys == nil {
					if !in.IsDelim(']') {
						out.Keys = make([]EnvironmentKey, 0, 1)
					} else {
						out.Keys = []EnvironmentKey{}
					}
				} else {
					out.Keys = (out.Keys)[:0]
				}
				for !in.IsDelim(']') {
					var v106 EnvironmentKey
					easyjson486f95b0DecodeGithubComOvhCdsSdk33(in, &v106)
					out.Keys = append(out.Keys, v106)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "usage":
			if in.IsNull() {
				in.Skip()
				out.Usage = nil
			} else {
				if out.Usage == nil {
					out.Usage = new(Usage)
				}
				easyjson486f95b0DecodeGithubComOvhCdsSdk4(in, out.Usage)
			}
		case "from_repository":
			out.FromRepository = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk9(out *jwriter.Writer, in Environment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	if len(in.Variable) != 0 {
		const prefix string = ",\"variables\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v107, v108 := range in.Variable {
				if v107 > 0 {
					out.RawByte(',')
				}
				easyjson486f95b0EncodeGithubComOvhCdsSdk32(out, v108)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"project_key\":"
		out.RawString(prefix)
		out.String(string(in.ProjectKey))
	}
	{
		const prefix string = ",\"last_modified\":"
		out.RawString(prefix)
		out.Int64(int64(in.LastModified))
	}
	{
		const prefix string = ",\"keys\":"
		out.RawString(prefix)
		if in.Keys == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v109, v110 := range in.Keys {
				if v109 > 0 {
					out.RawByte(',')
				}
				easyjson486f95b0EncodeGithubComOvhCdsSdk33(out, v110)
			}
			out.RawByte(']')
		}
	}
	if in.Usage != nil {
		const prefix string = ",\"usage\":"
		out.RawString(prefix)
		easyjson486f95b0EncodeGithubComOvhCdsSdk4(out, *in.Usage)
	}
	if in.FromRepository != "" {
		const prefix string = ",\"from_repository\":"
		out.RawString(prefix)
		out.String(string(in.FromRepository))
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk33(in *jlexer.Lexer, out *EnvironmentKey) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "environment_id":
			out.EnvironmentID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "public":
			out.Public = string(in.String())
		case "private":
			out.Private = string(in.String())
		case "keyID":
			out.KeyID = string(in.String())
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk33(out *jwriter.Writer, in EnvironmentKey) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"environment_id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.EnvironmentID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"public\":"
		out.RawString(prefix)
		out.String(string(in.Public))
	}
	{
		const prefix string = ",\"private\":"
		out.RawString(prefix)
		out.String(string(in.Private))
	}
	{
		const prefix string = ",\"keyID\":"
		out.RawString(prefix)
		out.String(string(in.KeyID))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk32(in *jlexer.Lexer, out *Variable) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "value":
			out.Value = string(in.String())
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk32(out *jwriter.Writer, in Variable) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk8(in *jlexer.Lexer, out *Application) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "icon":
			out.Icon = string(in.String())
		case "project_key":
			out.ProjectKey = string(in.String())
		case "variables":
			if in.IsNull() {
				in.Skip()
				out.Variable = nil
			} else {
				in.Delim('[')
				if out.Variable == nil {
					if !in.IsDelim(']') {
						out.Variable = make([]Variable, 0, 1)
					} else {
						out.Variable = []Variable{}
					}
				} else {
					out.Variable = (out.Variable)[:0]
				}
				for !in.IsDelim(']') {
					var v111 Variable
					easyjson486f95b0DecodeGithubComOvhCdsSdk32(in, &v111)
					out.Variable = append(out.Variable, v111)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "notifications":
			if in.IsNull() {
				in.Skip()
				out.Notifications = nil
			} else {
				in.Delim('[')
				if out.Notifications == nil {
					if !in.IsDelim(']') {
						out.Notifications = make([]UserNotification, 0, 1)
					} else {
						out.Notifications = []UserNotification{}
					}
				} else {
					out.Notifications = (out.Notifications)[:0]
				}
				for !in.IsDelim(']') {
					var v112 UserNotification
					easyjson486f95b0DecodeGithubComOvhCdsSdk34(in, &v112)
					out.Notifications = append(out.Notifications, v112)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "last_modified":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastModified).UnmarshalJSON(data))
			}
		case "vcs_server":
			out.VCSServer = string(in.String())
		case "repository_fullname":
			out.RepositoryFullname = string(in.String())
		case "vcs_strategy":
			easyjson486f95b0DecodeGithubComOvhCdsSdk35(in, &out.RepositoryStrategy)
		case "metadata":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Metadata = make(Metadata)
				} else {
					out.Metadata = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v113 string
					v113 = string(in.String())
					(out.Metadata)[key] = v113
					in.WantComma()
				}
				in.Delim('}')
			}
		case "keys":
			if in.IsNull() {
				in.Skip()
				out.Keys = nil
			} else {
				in.Delim('[')
				if out.Keys == nil {
					if !in.IsDelim(']') {
						out.Keys = make([]ApplicationKey, 0, 1)
					} else {
						out.Keys = []ApplicationKey{}
					}
				} else {
					out.Keys = (out.Keys)[:0]
				}
				for !in.IsDelim(']') {
					var v114 ApplicationKey
					easyjson486f95b0DecodeGithubComOvhCdsSdk36(in, &v114)
					out.Keys = append(out.Keys, v114)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "usage":
			if in.IsNull() {
				in.Skip()
				out.Usage = nil
			} else {
				if out.Usage == nil {
					out.Usage = new(Usage)
				}
				easyjson486f95b0DecodeGithubComOvhCdsSdk4(in, out.Usage)
			}
		case "deployment_strategies":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.DeploymentStrategies = make(map[string]IntegrationConfig)
				} else {
					out.DeploymentStrategies = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v115 IntegrationConfig
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						if !in.IsDelim('}') {
							v115 = make(IntegrationConfig)
						} else {
							v115 = nil
						}
						for !in.IsDelim('}') {
							key := string(in.String())
							in.WantColon()
							var v116 IntegrationConfigValue
							easyjson486f95b0DecodeGithubComOvhCdsSdk28(in, &v116)
							(v115)[key] = v116
							in.WantComma()
						}
						in.Delim('}')
					}
					(out.DeploymentStrategies)[key] = v115
					in.WantComma()
				}
				in.Delim('}')
			}
		case "vulnerabilities":
			if in.IsNull() {
				in.Skip()
				out.Vulnerabilities = nil
			} else {
				in.Delim('[')
				if out.Vulnerabilities == nil {
					if !in.IsDelim(']') {
						out.Vulnerabilities = make([]Vulnerability, 0, 1)
					} else {
						out.Vulnerabilities = []Vulnerability{}
					}
				} else {
					out.Vulnerabilities = (out.Vulnerabilities)[:0]
				}
				for !in.IsDelim(']') {
					var v117 Vulnerability
					easyjson486f95b0DecodeGithubComOvhCdsSdk37(in, &v117)
					out.Vulnerabilities = append(out.Vulnerabilities, v117)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "from_repository":
			out.FromRepository = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk8(out *jwriter.Writer, in Application) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"icon\":"
		out.RawString(prefix)
		out.String(string(in.Icon))
	}
	{
		const prefix string = ",\"project_key\":"
		out.RawString(prefix)
		out.String(string(in.ProjectKey))
	}
	if len(in.Variable) != 0 {
		const prefix string = ",\"variables\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v118, v119 := range in.Variable {
				if v118 > 0 {
					out.RawByte(',')
				}
				easyjson486f95b0EncodeGithubComOvhCdsSdk32(out, v119)
			}
			out.RawByte(']')
		}
	}
	if len(in.Notifications) != 0 {
		const prefix string = ",\"notifications\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v120, v121 := range in.Notifications {
				if v120 > 0 {
					out.RawByte(',')
				}
				easyjson486f95b0EncodeGithubComOvhCdsSdk34(out, v121)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"last_modified\":"
		out.RawString(prefix)
		out.Raw((in.LastModified).MarshalJSON())
	}
	if in.VCSServer != "" {
		const prefix string = ",\"vcs_server\":"
		out.RawString(prefix)
		out.String(string(in.VCSServer))
	}
	if in.RepositoryFullname != "" {
		const prefix string = ",\"repository_fullname\":"
		out.RawString(prefix)
		out.String(string(in.RepositoryFullname))
	}
	if true {
		const prefix string = ",\"vcs_strategy\":"
		out.RawString(prefix)
		easyjson486f95b0EncodeGithubComOvhCdsSdk35(out, in.RepositoryStrategy)
	}
	{
		const prefix string = ",\"metadata\":"
		out.RawString(prefix)
		if in.Metadata == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v122First := true
			for v122Name, v122Value := range in.Metadata {
				if v122First {
					v122First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v122Name))
				out.RawByte(':')
				out.String(string(v122Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"keys\":"
		out.RawString(prefix)
		if in.Keys == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v123, v124 := range in.Keys {
				if v123 > 0 {
					out.RawByte(',')
				}
				easyjson486f95b0EncodeGithubComOvhCdsSdk36(out, v124)
			}
			out.RawByte(']')
		}
	}
	if in.Usage != nil {
		const prefix string = ",\"usage\":"
		out.RawString(prefix)
		easyjson486f95b0EncodeGithubComOvhCdsSdk4(out, *in.Usage)
	}
	if len(in.DeploymentStrategies) != 0 {
		const prefix string = ",\"deployment_strategies\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v125First := true
			for v125Name, v125Value := range in.DeploymentStrategies {
				if v125First {
					v125First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v125Name))
				out.RawByte(':')
				if v125Value == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v126First := true
					for v126Name, v126Value := range v125Value {
						if v126First {
							v126First = false
						} else {
							out.RawByte(',')
						}
						out.String(string(v126Name))
						out.RawByte(':')
						easyjson486f95b0EncodeGithubComOvhCdsSdk28(out, v126Value)
					}
					out.RawByte('}')
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.Vulnerabilities) != 0 {
		const prefix string = ",\"vulnerabilities\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v127, v128 := range in.Vulnerabilities {
				if v127 > 0 {
					out.RawByte(',')
				}
				easyjson486f95b0EncodeGithubComOvhCdsSdk37(out, v128)
			}
			out.RawByte(']')
		}
	}
	if in.FromRepository != "" {
		const prefix string = ",\"from_repository\":"
		out.RawString(prefix)
		out.String(string(in.FromRepository))
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk37(in *jlexer.Lexer, out *Vulnerability) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "application_id":
			out.ApplicationID = int64(in.Int64())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "cve":
			out.CVE = string(in.String())
		case "link":
			out.Link = string(in.String())
		case "component":
			out.Component = string(in.String())
		case "version":
			out.Version = string(in.String())
		case "origin":
			out.Origin = string(in.String())
		case "severity":
			out.Severity = string(in.String())
		case "fix_in":
			out.FixIn = string(in.String())
		case "ignored":
			out.Ignored = bool(in.Bool())
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk37(out *jwriter.Writer, in Vulnerability) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"application_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.ApplicationID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"cve\":"
		out.RawString(prefix)
		out.String(string(in.CVE))
	}
	{
		const prefix string = ",\"link\":"
		out.RawString(prefix)
		out.String(string(in.Link))
	}
	{
		const prefix string = ",\"component\":"
		out.RawString(prefix)
		out.String(string(in.Component))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"origin\":"
		out.RawString(prefix)
		out.String(string(in.Origin))
	}
	{
		const prefix string = ",\"severity\":"
		out.RawString(prefix)
		out.String(string(in.Severity))
	}
	{
		const prefix string = ",\"fix_in\":"
		out.RawString(prefix)
		out.String(string(in.FixIn))
	}
	{
		const prefix string = ",\"ignored\":"
		out.RawString(prefix)
		out.Bool(bool(in.Ignored))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk36(in *jlexer.Lexer, out *ApplicationKey) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "application_id":
			out.ApplicationID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "public":
			out.Public = string(in.String())
		case "private":
			out.Private = string(in.String())
		case "keyID":
			out.KeyID = string(in.String())
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk36(out *jwriter.Writer, in ApplicationKey) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"application_id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ApplicationID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"public\":"
		out.RawString(prefix)
		out.String(string(in.Public))
	}
	{
		const prefix string = ",\"private\":"
		out.RawString(prefix)
		out.String(string(in.Private))
	}
	{
		const prefix string = ",\"keyID\":"
		out.RawString(prefix)
		out.String(string(in.KeyID))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk35(in *jlexer.Lexer, out *RepositoryStrategy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "connection_type":
			out.ConnectionType = string(in.String())
		case "ssh_key":
			out.SSHKey = string(in.String())
		case "ssh_key_content":
			out.SSHKeyContent = string(in.String())
		case "user":
			out.User = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "branch":
			out.Branch = string(in.String())
		case "default_branch":
			out.DefaultBranch = string(in.String())
		case "pgp_key":
			out.PGPKey = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk35(out *jwriter.Writer, in RepositoryStrategy) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"connection_type\":"
		out.RawString(prefix[1:])
		out.String(string(in.ConnectionType))
	}
	{
		const prefix string = ",\"ssh_key\":"
		out.RawString(prefix)
		out.String(string(in.SSHKey))
	}
	if in.SSHKeyContent != "" {
		const prefix string = ",\"ssh_key_content\":"
		out.RawString(prefix)
		out.String(string(in.SSHKeyContent))
	}
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.String(string(in.User))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	if in.Branch != "" {
		const prefix string = ",\"branch\":"
		out.RawString(prefix)
		out.String(string(in.Branch))
	}
	if in.DefaultBranch != "" {
		const prefix string = ",\"default_branch\":"
		out.RawString(prefix)
		out.String(string(in.DefaultBranch))
	}
	{
		const prefix string = ",\"pgp_key\":"
		out.RawString(prefix)
		out.String(string(in.PGPKey))
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk34(in *jlexer.Lexer, out *UserNotification) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "application_pipeline_id":
			out.ApplicationPipelineID = int64(in.Int64())
		case "pipeline":
			easyjson486f95b0DecodeGithubComOvhCdsSdk7(in, &out.Pipeline)
		case "environment":
			easyjson486f95b0DecodeGithubComOvhCdsSdk9(in, &out.Environment)
		case "notifications":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Notifications = make(map[string]UserNotificationSettings)
				} else {
					out.Notifications = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v129 UserNotificationSettings
					easyjson486f95b0DecodeGithubComOvhCdsSdk38(in, &v129)
					(out.Notifications)[key] = v129
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk34(out *jwriter.Writer, in UserNotification) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"application_pipeline_id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ApplicationPipelineID))
	}
	{
		const prefix string = ",\"pipeline\":"
		out.RawString(prefix)
		easyjson486f95b0EncodeGithubComOvhCdsSdk7(out, in.Pipeline)
	}
	{
		const prefix string = ",\"environment\":"
		out.RawString(prefix)
		easyjson486f95b0EncodeGithubComOvhCdsSdk9(out, in.Environment)
	}
	{
		const prefix string = ",\"notifications\":"
		out.RawString(prefix)
		if in.Notifications == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v130First := true
			for v130Name, v130Value := range in.Notifications {
				if v130First {
					v130First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v130Name))
				out.RawByte(':')
				easyjson486f95b0EncodeGithubComOvhCdsSdk38(out, v130Value)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk38(in *jlexer.Lexer, out *UserNotificationSettings) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "on_success":
			out.OnSuccess = string(in.String())
		case "on_failure":
			out.OnFailure = string(in.String())
		case "on_start":
			if in.IsNull() {
				in.Skip()
				out.OnStart = nil
			} else {
				if out.OnStart == nil {
					out.OnStart = new(bool)
				}
				*out.OnStart = bool(in.Bool())
			}
		case "send_to_groups":
			if in.IsNull() {
				in.Skip()
				out.SendToGroups = nil
			} else {
				if out.SendToGroups == nil {
					out.SendToGroups = new(bool)
				}
				*out.SendToGroups = bool(in.Bool())
			}
		case "send_to_author":
			if in.IsNull() {
				in.Skip()
				out.SendToAuthor = nil
			} else {
				if out.SendToAuthor == nil {
					out.SendToAuthor = new(bool)
				}
				*out.SendToAuthor = bool(in.Bool())
			}
		case "recipients":
			if in.IsNull() {
				in.Skip()
				out.Recipients = nil
			} else {
				in.Delim('[')
				if out.Recipients == nil {
					if !in.IsDelim(']') {
						out.Recipients = make([]string, 0, 4)
					} else {
						out.Recipients = []string{}
					}
				} else {
					out.Recipients = (out.Recipients)[:0]
				}
				for !in.IsDelim(']') {
					var v131 string
					v131 = string(in.String())
					out.Recipients = append(out.Recipients, v131)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "template":
			if in.IsNull() {
				in.Skip()
				out.Template = nil
			} else {
				if out.Template == nil {
					out.Template = new(UserNotificationTemplate)
				}
				easyjson486f95b0DecodeGithubComOvhCdsSdk39(in, out.Template)
			}
		case "conditions":
			easyjson486f95b0DecodeGithubComOvhCdsSdk25(in, &out.Conditions)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk38(out *jwriter.Writer, in UserNotificationSettings) {
	out.RawByte('{')
	first := true
	_ = first
	if in.OnSuccess != "" {
		const prefix string = ",\"on_success\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.OnSuccess))
	}
	if in.OnFailure != "" {
		const prefix string = ",\"on_failure\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnFailure))
	}
	if in.OnStart != nil {
		const prefix string = ",\"on_start\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.OnStart))
	}
	if in.SendToGroups != nil {
		const prefix string = ",\"send_to_groups\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.SendToGroups))
	}
	if in.SendToAuthor != nil {
		const prefix string = ",\"send_to_author\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.SendToAuthor))
	}
	if len(in.Recipients) != 0 {
		const prefix string = ",\"recipients\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v132, v133 := range in.Recipients {
				if v132 > 0 {
					out.RawByte(',')
				}
				out.String(string(v133))
			}
			out.RawByte(']')
		}
	}
	if in.Template != nil {
		const prefix string = ",\"template\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson486f95b0EncodeGithubComOvhCdsSdk39(out, *in.Template)
	}
	if true {
		const prefix string = ",\"conditions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson486f95b0EncodeGithubComOvhCdsSdk25(out, in.Conditions)
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk39(in *jlexer.Lexer, out *UserNotificationTemplate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "subject":
			out.Subject = string(in.String())
		case "body":
			out.Body = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk39(out *jwriter.Writer, in UserNotificationTemplate) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Subject != "" {
		const prefix string = ",\"subject\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Subject))
	}
	if in.Body != "" {
		const prefix string = ",\"body\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Body))
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk7(in *jlexer.Lexer, out *Pipeline) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "projectKey":
			out.ProjectKey = string(in.String())
		case "stages":
			if in.IsNull() {
				in.Skip()
				out.Stages = nil
			} else {
				in.Delim('[')
				if out.Stages == nil {
					if !in.IsDelim(']') {
						out.Stages = make([]Stage, 0, 1)
					} else {
						out.Stages = []Stage{}
					}
				} else {
					out.Stages = (out.Stages)[:0]
				}
				for !in.IsDelim(']') {
					var v134 Stage
					easyjson486f95b0DecodeGithubComOvhCdsSdk40(in, &v134)
					out.Stages = append(out.Stages, v134)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "parameters":
			if in.IsNull() {
				in.Skip()
				out.Parameter = nil
			} else {
				in.Delim('[')
				if out.Parameter == nil {
					if !in.IsDelim(']') {
						out.Parameter = make([]Parameter, 0, 1)
					} else {
						out.Parameter = []Parameter{}
					}
				} else {
					out.Parameter = (out.Parameter)[:0]
				}
				for !in.IsDelim(']') {
					var v135 Parameter
					easyjson486f95b0DecodeGithubComOvhCdsSdk24(in, &v135)
					out.Parameter = append(out.Parameter, v135)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "usage":
			if in.IsNull() {
				in.Skip()
				out.Usage = nil
			} else {
				if out.Usage == nil {
					out.Usage = new(Usage)
				}
				easyjson486f95b0DecodeGithubComOvhCdsSdk4(in, out.Usage)
			}
		case "last_modified":
			out.LastModified = int64(in.Int64())
		case "from_repository":
			out.FromRepository = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk7(out *jwriter.Writer, in Pipeline) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"projectKey\":"
		out.RawString(prefix)
		out.String(string(in.ProjectKey))
	}
	{
		const prefix string = ",\"stages\":"
		out.RawString(prefix)
		if in.Stages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v136, v137 := range in.Stages {
				if v136 > 0 {
					out.RawByte(',')
				}
				easyjson486f95b0EncodeGithubComOvhCdsSdk40(out, v137)
			}
			out.RawByte(']')
		}
	}
	if len(in.Parameter) != 0 {
		const prefix string = ",\"parameters\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v138, v139 := range in.Parameter {
				if v138 > 0 {
					out.RawByte(',')
				}
				easyjson486f95b0EncodeGithubComOvhCdsSdk24(out, v139)
			}
			out.RawByte(']')
		}
	}
	if in.Usage != nil {
		const prefix string = ",\"usage\":"
		out.RawString(prefix)
		easyjson486f95b0EncodeGithubComOvhCdsSdk4(out, *in.Usage)
	}
	{
		const prefix string = ",\"last_modified\":"
		out.RawString(prefix)
		out.Int64(int64(in.LastModified))
	}
	{
		const prefix string = ",\"from_repository\":"
		out.RawString(prefix)
		out.String(string(in.FromRepository))
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk40(in *jlexer.Lexer, out *Stage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "build_order":
			out.BuildOrder = int(in.Int())
		case "enabled":
			out.Enabled = bool(in.Bool())
		case "run_jobs":
			if in.IsNull() {
				in.Skip()
				out.RunJobs = nil
			} else {
				in.Delim('[')
				if out.RunJobs == nil {
					if !in.IsDelim(']') {
						out.RunJobs = make([]WorkflowNodeJobRun, 0, 1)
					} else {
						out.RunJobs = []WorkflowNodeJobRun{}
					}
				} else {
					out.RunJobs = (out.RunJobs)[:0]
				}
				for !in.IsDelim(']') {
					var v140 WorkflowNodeJobRun
					easyjson486f95b0DecodeGithubComOvhCdsSdk41(in, &v140)
					out.RunJobs = append(out.RunJobs, v140)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "prerequisites":
			if in.IsNull() {
				in.Skip()
				out.Prerequisites = nil
			} else {
				in.Delim('[')
				if out.Prerequisites == nil {
					if !in.IsDelim(']') {
						out.Prerequisites = make([]Prerequisite, 0, 2)
					} else {
						out.Prerequisites = []Prerequisite{}
					}
				} else {
					out.Prerequisites = (out.Prerequisites)[:0]
				}
				for !in.IsDelim(']') {
					var v141 Prerequisite
					easyjson486f95b0DecodeGithubComOvhCdsSdk42(in, &v141)
					out.Prerequisites = append(out.Prerequisites, v141)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "conditions":
			easyjson486f95b0DecodeGithubComOvhCdsSdk25(in, &out.Conditions)
		case "last_modified":
			out.LastModified = int64(in.Int64())
		case "jobs":
			if in.IsNull() {
				in.Skip()
				out.Jobs = nil
			} else {
				in.Delim('[')
				if out.Jobs == nil {
					if !in.IsDelim(']') {
						out.Jobs = make([]Job, 0, 1)
					} else {
						out.Jobs = []Job{}
					}
				} else {
					out.Jobs = (out.Jobs)[:0]
				}
				for !in.IsDelim(']') {
					var v142 Job
					easyjson486f95b0DecodeGithubComOvhCdsSdk43(in, &v142)
					out.Jobs = append(out.Jobs, v142)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "status":
			out.Status = string(in.String())
		case "warnings":
			if in.IsNull() {
				in.Skip()
				out.Warnings = nil
			} else {
				in.Delim('[')
				if out.Warnings == nil {
					if !in.IsDelim(']') {
						out.Warnings = make([]PipelineBuildWarning, 0, 1)
					} else {
						out.Warnings = []PipelineBuildWarning{}
					}
				} else {
					out.Warnings = (out.Warnings)[:0]
				}
				for !in.IsDelim(']') {
					var v143 PipelineBuildWarning
					easyjson486f95b0DecodeGithubComOvhCdsSdk44(in, &v143)
					out.Warnings = append(out.Warnings, v143)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk40(out *jwriter.Writer, in Stage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"build_order\":"
		out.RawString(prefix)
		out.Int(int(in.BuildOrder))
	}
	{
		const prefix string = ",\"enabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.Enabled))
	}
	{
		const prefix string = ",\"run_jobs\":"
		out.RawString(prefix)
		if in.RunJobs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v144, v145 := range in.RunJobs {
				if v144 > 0 {
					out.RawByte(',')
				}
				easyjson486f95b0EncodeGithubComOvhCdsSdk41(out, v145)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"prerequisites\":"
		out.RawString(prefix)
		if in.Prerequisites == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v146, v147 := range in.Prerequisites {
				if v146 > 0 {
					out.RawByte(',')
				}
				easyjson486f95b0EncodeGithubComOvhCdsSdk42(out, v147)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"conditions\":"
		out.RawString(prefix)
		easyjson486f95b0EncodeGithubComOvhCdsSdk25(out, in.Conditions)
	}
	{
		const prefix string = ",\"last_modified\":"
		out.RawString(prefix)
		out.Int64(int64(in.LastModified))
	}
	{
		const prefix string = ",\"jobs\":"
		out.RawString(prefix)
		if in.Jobs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v148, v149 := range in.Jobs {
				if v148 > 0 {
					out.RawByte(',')
				}
				easyjson486f95b0EncodeGithubComOvhCdsSdk43(out, v149)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"warnings\":"
		out.RawString(prefix)
		if in.Warnings == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v150, v151 := range in.Warnings {
				if v150 > 0 {
					out.RawByte(',')
				}
				easyjson486f95b0EncodeGithubComOvhCdsSdk44(out, v151)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk44(in *jlexer.Lexer, out *PipelineBuildWarning) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "action":
			easyjson486f95b0DecodeGithubComOvhCdsSdk45(in, &out.Action)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk44(out *jwriter.Writer, in PipelineBuildWarning) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"action\":"
		out.RawString(prefix)
		easyjson486f95b0EncodeGithubComOvhCdsSdk45(out, in.Action)
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk45(in *jlexer.Lexer, out *Action) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "group_id":
			if in.IsNull() {
				in.Skip()
				out.GroupID = nil
			} else {
				if out.GroupID == nil {
					out.GroupID = new(int64)
				}
				*out.GroupID = int64(in.Int64())
			}
		case "name":
			out.Name = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "enabled":
			out.Enabled = bool(in.Bool())
		case "deprecated":
			out.Deprecated = bool(in.Bool())
		case "step_name":
			out.StepName = string(in.String())
		case "optional":
			out.Optional = bool(in.Bool())
		case "always_executed":
			out.AlwaysExecuted = bool(in.Bool())
		case "requirements":
			if in.IsNull() {
				in.Skip()
				out.Requirements = nil
			} else {
				in.Delim('[')
				if out.Requirements == nil {
					if !in.IsDelim(']') {
						out.Requirements = make(RequirementList, 0, 1)
					} else {
						out.Requirements = RequirementList{}
					}
				} else {
					out.Requirements = (out.Requirements)[:0]
				}
				for !in.IsDelim(']') {
					var v152 Requirement
					easyjson486f95b0DecodeGithubComOvhCdsSdk31(in, &v152)
					out.Requirements = append(out.Requirements, v152)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "parameters":
			if in.IsNull() {
				in.Skip()
				out.Parameters = nil
			} else {
				in.Delim('[')
				if out.Parameters == nil {
					if !in.IsDelim(']') {
						out.Parameters = make([]Parameter, 0, 1)
					} else {
						out.Parameters = []Parameter{}
					}
				} else {
					out.Parameters = (out.Parameters)[:0]
				}
				for !in.IsDelim(']') {
					var v153 Parameter
					easyjson486f95b0DecodeGithubComOvhCdsSdk24(in, &v153)
					out.Parameters = append(out.Parameters, v153)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "actions":
			if in.IsNull() {
				in.Skip()
				out.Actions = nil
			} else {
				in.Delim('[')
				if out.Actions == nil {
					if !in.IsDelim(']') {
						out.Actions = make([]Action, 0, 1)
					} else {
						out.Actions = []Action{}
					}
				} else {
					out.Actions = (out.Actions)[:0]
				}
				for !in.IsDelim(']') {
					var v154 Action
					easyjson486f95b0DecodeGithubComOvhCdsSdk45(in, &v154)
					out.Actions = append(out.Actions, v154)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "group":
			if in.IsNull() {
				in.Skip()
				out.Group = nil
			} else {
				if out.Group == nil {
					out.Group = new(Group)
				}
				easyjson486f95b0DecodeGithubComOvhCdsSdk46(in, out.Group)
			}
		case "first_audit":
			if in.IsNull() {
				in.Skip()
				out.FirstAudit = nil
			} else {
				if out.FirstAudit == nil {
					out.FirstAudit = new(AuditAction)
				}
				easyjson486f95b0DecodeGithubComOvhCdsSdk47(in, out.FirstAudit)
			}
		case "last_audit":
			if in.IsNull() {
				in.Skip()
				out.LastAudit = nil
			} else {
				if out.LastAudit == nil {
					out.LastAudit = new(AuditAction)
				}
				easyjson486f95b0DecodeGithubComOvhCdsSdk47(in, out.LastAudit)
			}
		case "editable":
			out.Editable = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk45(out *jwriter.Writer, in Action) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	if in.GroupID != nil {
		const prefix string = ",\"group_id\":"
		out.RawString(prefix)
		out.Int64(int64(*in.GroupID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"enabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.Enabled))
	}
	{
		const prefix string = ",\"deprecated\":"
		out.RawString(prefix)
		out.Bool(bool(in.Deprecated))
	}
	if in.StepName != "" {
		const prefix string = ",\"step_name\":"
		out.RawString(prefix)
		out.String(string(in.StepName))
	}
	{
		const prefix string = ",\"optional\":"
		out.RawString(prefix)
		out.Bool(bool(in.Optional))
	}
	{
		const prefix string = ",\"always_executed\":"
		out.RawString(prefix)
		out.Bool(bool(in.AlwaysExecuted))
	}
	{
		const prefix string = ",\"requirements\":"
		out.RawString(prefix)
		if in.Requirements == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v155, v156 := range in.Requirements {
				if v155 > 0 {
					out.RawByte(',')
				}
				easyjson486f95b0EncodeGithubComOvhCdsSdk31(out, v156)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"parameters\":"
		out.RawString(prefix)
		if in.Parameters == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v157, v158 := range in.Parameters {
				if v157 > 0 {
					out.RawByte(',')
				}
				easyjson486f95b0EncodeGithubComOvhCdsSdk24(out, v158)
			}
			out.RawByte(']')
		}
	}
	if len(in.Actions) != 0 {
		const prefix string = ",\"actions\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v159, v160 := range in.Actions {
				if v159 > 0 {
					out.RawByte(',')
				}
				easyjson486f95b0EncodeGithubComOvhCdsSdk45(out, v160)
			}
			out.RawByte(']')
		}
	}
	if in.Group != nil {
		const prefix string = ",\"group\":"
		out.RawString(prefix)
		easyjson486f95b0EncodeGithubComOvhCdsSdk46(out, *in.Group)
	}
	if in.FirstAudit != nil {
		const prefix string = ",\"first_audit\":"
		out.RawString(prefix)
		easyjson486f95b0EncodeGithubComOvhCdsSdk47(out, *in.FirstAudit)
	}
	if in.LastAudit != nil {
		const prefix string = ",\"last_audit\":"
		out.RawString(prefix)
		easyjson486f95b0EncodeGithubComOvhCdsSdk47(out, *in.LastAudit)
	}
	if in.Editable {
		const prefix string = ",\"editable\":"
		out.RawString(prefix)
		out.Bool(bool(in.Editable))
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk47(in *jlexer.Lexer, out *AuditAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "action_id":
			out.ActionID = int64(in.Int64())
		case "data_type":
			out.DataType = string(in.String())
		case "data_before":
			out.DataBefore = string(in.String())
		case "data_after":
			out.DataAfter = string(in.String())
		case "id":
			out.ID = int64(in.Int64())
		case "triggered_by":
			out.TriggeredBy = string(in.String())
		case "created":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Created).UnmarshalJSON(data))
			}
		case "event_type":
			out.EventType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk47(out *jwriter.Writer, in AuditAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"action_id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ActionID))
	}
	{
		const prefix string = ",\"data_type\":"
		out.RawString(prefix)
		out.String(string(in.DataType))
	}
	{
		const prefix string = ",\"data_before\":"
		out.RawString(prefix)
		out.String(string(in.DataBefore))
	}
	{
		const prefix string = ",\"data_after\":"
		out.RawString(prefix)
		out.String(string(in.DataAfter))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"triggered_by\":"
		out.RawString(prefix)
		out.String(string(in.TriggeredBy))
	}
	{
		const prefix string = ",\"created\":"
		out.RawString(prefix)
		out.Raw((in.Created).MarshalJSON())
	}
	{
		const prefix string = ",\"event_type\":"
		out.RawString(prefix)
		out.String(string(in.EventType))
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk46(in *jlexer.Lexer, out *Group) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "members":
			if in.IsNull() {
				in.Skip()
				out.Members = nil
			} else {
				in.Delim('[')
				if out.Members == nil {
					if !in.IsDelim(']') {
						out.Members = make([]GroupMember, 0, 1)
					} else {
						out.Members = []GroupMember{}
					}
				} else {
					out.Members = (out.Members)[:0]
				}
				for !in.IsDelim(']') {
					var v161 GroupMember
					easyjson486f95b0DecodeGithubComOvhCdsSdk48(in, &v161)
					out.Members = append(out.Members, v161)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "admin":
			out.Admin = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk46(out *jwriter.Writer, in Group) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	if len(in.Members) != 0 {
		const prefix string = ",\"members\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v162, v163 := range in.Members {
				if v162 > 0 {
					out.RawByte(',')
				}
				easyjson486f95b0EncodeGithubComOvhCdsSdk48(out, v163)
			}
			out.RawByte(']')
		}
	}
	if in.Admin {
		const prefix string = ",\"admin\":"
		out.RawString(prefix)
		out.Bool(bool(in.Admin))
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk48(in *jlexer.Lexer, out *GroupMember) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "fullname":
			out.Fullname = string(in.String())
		case "admin":
			out.Admin = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk48(out *jwriter.Writer, in GroupMember) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"fullname\":"
		out.RawString(prefix)
		out.String(string(in.Fullname))
	}
	if in.Admin {
		const prefix string = ",\"admin\":"
		out.RawString(prefix)
		out.Bool(bool(in.Admin))
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk43(in *jlexer.Lexer, out *Job) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "pipeline_action_id":
			out.PipelineActionID = int64(in.Int64())
		case "pipeline_stage_id":
			out.PipelineStageID = int64(in.Int64())
		case "enabled":
			out.Enabled = bool(in.Bool())
		case "last_modified":
			out.LastModified = int64(in.Int64())
		case "action":
			easyjson486f95b0DecodeGithubComOvhCdsSdk45(in, &out.Action)
		case "warnings":
			if in.IsNull() {
				in.Skip()
				out.Warnings = nil
			} else {
				in.Delim('[')
				if out.Warnings == nil {
					if !in.IsDelim(']') {
						out.Warnings = make([]PipelineBuildWarning, 0, 1)
					} else {
						out.Warnings = []PipelineBuildWarning{}
					}
				} else {
					out.Warnings = (out.Warnings)[:0]
				}
				for !in.IsDelim(']') {
					var v164 PipelineBuildWarning
					easyjson486f95b0DecodeGithubComOvhCdsSdk44(in, &v164)
					out.Warnings = append(out.Warnings, v164)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk43(out *jwriter.Writer, in Job) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"pipeline_action_id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.PipelineActionID))
	}
	{
		const prefix string = ",\"pipeline_stage_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.PipelineStageID))
	}
	{
		const prefix string = ",\"enabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.Enabled))
	}
	{
		const prefix string = ",\"last_modified\":"
		out.RawString(prefix)
		out.Int64(int64(in.LastModified))
	}
	{
		const prefix string = ",\"action\":"
		out.RawString(prefix)
		easyjson486f95b0EncodeGithubComOvhCdsSdk45(out, in.Action)
	}
	{
		const prefix string = ",\"warnings\":"
		out.RawString(prefix)
		if in.Warnings == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v165, v166 := range in.Warnings {
				if v165 > 0 {
					out.RawByte(',')
				}
				easyjson486f95b0EncodeGithubComOvhCdsSdk44(out, v166)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk42(in *jlexer.Lexer, out *Prerequisite) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "parameter":
			out.Parameter = string(in.String())
		case "expected_value":
			out.ExpectedValue = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk42(out *jwriter.Writer, in Prerequisite) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"parameter\":"
		out.RawString(prefix[1:])
		out.String(string(in.Parameter))
	}
	{
		const prefix string = ",\"expected_value\":"
		out.RawString(prefix)
		out.String(string(in.ExpectedValue))
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk41(in *jlexer.Lexer, out *WorkflowNodeJobRun) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "project_id":
			out.ProjectID = int64(in.Int64())
		case "id":
			out.ID = int64(in.Int64())
		case "workflow_node_run_id":
			out.WorkflowNodeRunID = int64(in.Int64())
		case "job":
			easyjson486f95b0DecodeGithubComOvhCdsSdk49(in, &out.Job)
		case "parameters":
			if in.IsNull() {
				in.Skip()
				out.Parameters = nil
			} else {
				in.Delim('[')
				if out.Parameters == nil {
					if !in.IsDelim(']') {
						out.Parameters = make([]Parameter, 0, 1)
					} else {
						out.Parameters = []Parameter{}
					}
				} else {
					out.Parameters = (out.Parameters)[:0]
				}
				for !in.IsDelim(']') {
					var v167 Parameter
					easyjson486f95b0DecodeGithubComOvhCdsSdk24(in, &v167)
					out.Parameters = append(out.Parameters, v167)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "status":
			out.Status = string(in.String())
		case "retry":
			out.Retry = int(in.Int())
		case "queued":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Queued).UnmarshalJSON(data))
			}
		case "queued_seconds":
			out.QueuedSeconds = int64(in.Int64())
		case "start":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Start).UnmarshalJSON(data))
			}
		case "done":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Done).UnmarshalJSON(data))
			}
		case "model":
			out.Model = string(in.String())
		case "model_type":
			out.ModelType = string(in.String())
		case "bookedby":
			easyjson486f95b0DecodeGithubComOvhCdsSdk50(in, &out.BookedBy)
		case "spawninfos":
			if in.IsNull() {
				in.Skip()
				out.SpawnInfos = nil
			} else {
				in.Delim('[')
				if out.SpawnInfos == nil {
					if !in.IsDelim(']') {
						out.SpawnInfos = make([]SpawnInfo, 0, 1)
					} else {
						out.SpawnInfos = []SpawnInfo{}
					}
				} else {
					out.SpawnInfos = (out.SpawnInfos)[:0]
				}
				for !in.IsDelim(']') {
					var v168 SpawnInfo
					easyjson486f95b0DecodeGithubComOvhCdsSdk51(in, &v168)
					out.SpawnInfos = append(out.SpawnInfos, v168)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "exec_groups":
			if in.IsNull() {
				in.Skip()
				out.ExecGroups = nil
			} else {
				in.Delim('[')
				if out.ExecGroups == nil {
					if !in.IsDelim(']') {
						out.ExecGroups = make(Groups, 0, 1)
					} else {
						out.ExecGroups = Groups{}
					}
				} else {
					out.ExecGroups = (out.ExecGroups)[:0]
				}
				for !in.IsDelim(']') {
					var v169 Group
					easyjson486f95b0DecodeGithubComOvhCdsSdk46(in, &v169)
					out.ExecGroups = append(out.ExecGroups, v169)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "integration_plugin_binaries":
			if in.IsNull() {
				in.Skip()
				out.IntegrationPluginBinaries = nil
			} else {
				in.Delim('[')
				if out.IntegrationPluginBinaries == nil {
					if !in.IsDelim(']') {
						out.IntegrationPluginBinaries = make([]GRPCPluginBinary, 0, 1)
					} else {
						out.IntegrationPluginBinaries = []GRPCPluginBinary{}
					}
				} else {
					out.IntegrationPluginBinaries = (out.IntegrationPluginBinaries)[:0]
				}
				for !in.IsDelim(']') {
					var v170 GRPCPluginBinary
					easyjson486f95b0DecodeGithubComOvhCdsSdk30(in, &v170)
					out.IntegrationPluginBinaries = append(out.IntegrationPluginBinaries, v170)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "header":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Header = make(WorkflowRunHeaders)
				} else {
					out.Header = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v171 string
					v171 = string(in.String())
					(out.Header)[key] = v171
					in.WantComma()
				}
				in.Delim('}')
			}
		case "contains_service":
			out.ContainsService = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk41(out *jwriter.Writer, in WorkflowNodeJobRun) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"project_id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ProjectID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int64(int64(in.ID))
	}
	if in.WorkflowNodeRunID != 0 {
		const prefix string = ",\"workflow_node_run_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.WorkflowNodeRunID))
	}
	{
		const prefix string = ",\"job\":"
		out.RawString(prefix)
		easyjson486f95b0EncodeGithubComOvhCdsSdk49(out, in.Job)
	}
	if len(in.Parameters) != 0 {
		const prefix string = ",\"parameters\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v172, v173 := range in.Parameters {
				if v172 > 0 {
					out.RawByte(',')
				}
				easyjson486f95b0EncodeGithubComOvhCdsSdk24(out, v173)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"retry\":"
		out.RawString(prefix)
		out.Int(int(in.Retry))
	}
	if true {
		const prefix string = ",\"queued\":"
		out.RawString(prefix)
		out.Raw((in.Queued).MarshalJSON())
	}
	if in.QueuedSeconds != 0 {
		const prefix string = ",\"queued_seconds\":"
		out.RawString(prefix)
		out.Int64(int64(in.QueuedSeconds))
	}
	if true {
		const prefix string = ",\"start\":"
		out.RawString(prefix)
		out.Raw((in.Start).MarshalJSON())
	}
	if true {
		const prefix string = ",\"done\":"
		out.RawString(prefix)
		out.Raw((in.Done).MarshalJSON())
	}
	if in.Model != "" {
		const prefix string = ",\"model\":"
		out.RawString(prefix)
		out.String(string(in.Model))
	}
	if in.ModelType != "" {
		const prefix string = ",\"model_type\":"
		out.RawString(prefix)
		out.String(string(in.ModelType))
	}
	if true {
		const prefix string = ",\"bookedby\":"
		out.RawString(prefix)
		easyjson486f95b0EncodeGithubComOvhCdsSdk50(out, in.BookedBy)
	}
	{
		const prefix string = ",\"spawninfos\":"
		out.RawString(prefix)
		if in.SpawnInfos == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v174, v175 := range in.SpawnInfos {
				if v174 > 0 {
					out.RawByte(',')
				}
				easyjson486f95b0EncodeGithubComOvhCdsSdk51(out, v175)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"exec_groups\":"
		out.RawString(prefix)
		if in.ExecGroups == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v176, v177 := range in.ExecGroups {
				if v176 > 0 {
					out.RawByte(',')
				}
				easyjson486f95b0EncodeGithubComOvhCdsSdk46(out, v177)
			}
			out.RawByte(']')
		}
	}
	if len(in.IntegrationPluginBinaries) != 0 {
		const prefix string = ",\"integration_plugin_binaries\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v178, v179 := range in.IntegrationPluginBinaries {
				if v178 > 0 {
					out.RawByte(',')
				}
				easyjson486f95b0EncodeGithubComOvhCdsSdk30(out, v179)
			}
			out.RawByte(']')
		}
	}
	if len(in.Header) != 0 {
		const prefix string = ",\"header\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v180First := true
			for v180Name, v180Value := range in.Header {
				if v180First {
					v180First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v180Name))
				out.RawByte(':')
				out.String(string(v180Value))
			}
			out.RawByte('}')
		}
	}
	if in.ContainsService {
		const prefix string = ",\"contains_service\":"
		out.RawString(prefix)
		out.Bool(bool(in.ContainsService))
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk51(in *jlexer.Lexer, out *SpawnInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "api_time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.APITime).UnmarshalJSON(data))
			}
		case "remote_time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.RemoteTime).UnmarshalJSON(data))
			}
		case "message":
			easyjson486f95b0DecodeGithubComOvhCdsSdk52(in, &out.Message)
		case "user_message":
			out.UserMessage = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk51(out *jwriter.Writer, in SpawnInfo) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"api_time\":"
		first = false
		out.RawString(prefix[1:])
		out.Raw((in.APITime).MarshalJSON())
	}
	if true {
		const prefix string = ",\"remote_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.RemoteTime).MarshalJSON())
	}
	if true {
		const prefix string = ",\"message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson486f95b0EncodeGithubComOvhCdsSdk52(out, in.Message)
	}
	if in.UserMessage != "" {
		const prefix string = ",\"user_message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserMessage))
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk52(in *jlexer.Lexer, out *SpawnMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "args":
			if in.IsNull() {
				in.Skip()
				out.Args = nil
			} else {
				in.Delim('[')
				if out.Args == nil {
					if !in.IsDelim(']') {
						out.Args = make([]interface{}, 0, 4)
					} else {
						out.Args = []interface{}{}
					}
				} else {
					out.Args = (out.Args)[:0]
				}
				for !in.IsDelim(']') {
					var v181 interface{}
					if m, ok := v181.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v181.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v181 = in.Interface()
					}
					out.Args = append(out.Args, v181)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk52(out *jwriter.Writer, in SpawnMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"args\":"
		out.RawString(prefix)
		if in.Args == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v182, v183 := range in.Args {
				if v182 > 0 {
					out.RawByte(',')
				}
				if m, ok := v183.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v183.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v183))
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk50(in *jlexer.Lexer, out *Service) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "last_heartbeat":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastHeartbeat).UnmarshalJSON(data))
			}
		case "monitoring_status":
			easyjson486f95b0DecodeGithubComOvhCdsSdk53(in, &out.MonitoringStatus)
		case "version":
			out.Version = string(in.String())
		case "up_to_date":
			out.Uptodate = bool(in.Bool())
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "http_url":
			out.HTTPURL = string(in.String())
		case "config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Config = make(ServiceConfig)
				} else {
					out.Config = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v184 interface{}
					if m, ok := v184.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v184.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v184 = in.Interface()
					}
					(out.Config)[key] = v184
					in.WantComma()
				}
				in.Delim('}')
			}
		case "public_key":
			if in.IsNull() {
				in.Skip()
				out.PublicKey = nil
			} else {
				out.PublicKey = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk50(out *jwriter.Writer, in Service) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"last_heartbeat\":"
		out.RawString(prefix[1:])
		out.Raw((in.LastHeartbeat).MarshalJSON())
	}
	{
		const prefix string = ",\"monitoring_status\":"
		out.RawString(prefix)
		easyjson486f95b0EncodeGithubComOvhCdsSdk53(out, in.MonitoringStatus)
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"up_to_date\":"
		out.RawString(prefix)
		out.Bool(bool(in.Uptodate))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"http_url\":"
		out.RawString(prefix)
		out.String(string(in.HTTPURL))
	}
	{
		const prefix string = ",\"config\":"
		out.RawString(prefix)
		if in.Config == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v186First := true
			for v186Name, v186Value := range in.Config {
				if v186First {
					v186First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v186Name))
				out.RawByte(':')
				if m, ok := v186Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v186Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v186Value))
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"public_key\":"
		out.RawString(prefix)
		out.Base64Bytes(in.PublicKey)
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk53(in *jlexer.Lexer, out *MonitoringStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "now":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Now).UnmarshalJSON(data))
			}
		case "lines":
			if in.IsNull() {
				in.Skip()
				out.Lines = nil
			} else {
				in.Delim('[')
				if out.Lines == nil {
					if !in.IsDelim(']') {
						out.Lines = make([]MonitoringStatusLine, 0, 1)
					} else {
						out.Lines = []MonitoringStatusLine{}
					}
				} else {
					out.Lines = (out.Lines)[:0]
				}
				for !in.IsDelim(']') {
					var v189 MonitoringStatusLine
					easyjson486f95b0DecodeGithubComOvhCdsSdk54(in, &v189)
					out.Lines = append(out.Lines, v189)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk53(out *jwriter.Writer, in MonitoringStatus) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"now\":"
		out.RawString(prefix[1:])
		out.Raw((in.Now).MarshalJSON())
	}
	{
		const prefix string = ",\"lines\":"
		out.RawString(prefix)
		if in.Lines == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v190, v191 := range in.Lines {
				if v190 > 0 {
					out.RawByte(',')
				}
				easyjson486f95b0EncodeGithubComOvhCdsSdk54(out, v191)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk54(in *jlexer.Lexer, out *MonitoringStatusLine) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		case "component":
			out.Component = string(in.String())
		case "value":
			out.Value = string(in.String())
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk54(out *jwriter.Writer, in MonitoringStatusLine) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"component\":"
		out.RawString(prefix)
		out.String(string(in.Component))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk49(in *jlexer.Lexer, out *ExecutedJob) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "step_status":
			if in.IsNull() {
				in.Skip()
				out.StepStatus = nil
			} else {
				in.Delim('[')
				if out.StepStatus == nil {
					if !in.IsDelim(']') {
						out.StepStatus = make([]StepStatus, 0, 1)
					} else {
						out.StepStatus = []StepStatus{}
					}
				} else {
					out.StepStatus = (out.StepStatus)[:0]
				}
				for !in.IsDelim(']') {
					var v192 StepStatus
					easyjson486f95b0DecodeGithubComOvhCdsSdk55(in, &v192)
					out.StepStatus = append(out.StepStatus, v192)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "reason":
			out.Reason = string(in.String())
		case "worker_name":
			out.WorkerName = string(in.String())
		case "worker_id":
			out.WorkerID = string(in.String())
		case "pipeline_action_id":
			out.PipelineActionID = int64(in.Int64())
		case "pipeline_stage_id":
			out.PipelineStageID = int64(in.Int64())
		case "enabled":
			out.Enabled = bool(in.Bool())
		case "last_modified":
			out.LastModified = int64(in.Int64())
		case "action":
			easyjson486f95b0DecodeGithubComOvhCdsSdk45(in, &out.Action)
		case "warnings":
			if in.IsNull() {
				in.Skip()
				out.Warnings = nil
			} else {
				in.Delim('[')
				if out.Warnings == nil {
					if !in.IsDelim(']') {
						out.Warnings = make([]PipelineBuildWarning, 0, 1)
					} else {
						out.Warnings = []PipelineBuildWarning{}
					}
				} else {
					out.Warnings = (out.Warnings)[:0]
				}
				for !in.IsDelim(']') {
					var v193 PipelineBuildWarning
					easyjson486f95b0DecodeGithubComOvhCdsSdk44(in, &v193)
					out.Warnings = append(out.Warnings, v193)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk49(out *jwriter.Writer, in ExecutedJob) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"step_status\":"
		out.RawString(prefix[1:])
		if in.StepStatus == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v194, v195 := range in.StepStatus {
				if v194 > 0 {
					out.RawByte(',')
				}
				easyjson486f95b0EncodeGithubComOvhCdsSdk55(out, v195)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.String(string(in.Reason))
	}
	{
		const prefix string = ",\"worker_name\":"
		out.RawString(prefix)
		out.String(string(in.WorkerName))
	}
	{
		const prefix string = ",\"worker_id\":"
		out.RawString(prefix)
		out.String(string(in.WorkerID))
	}
	{
		const prefix string = ",\"pipeline_action_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.PipelineActionID))
	}
	{
		const prefix string = ",\"pipeline_stage_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.PipelineStageID))
	}
	{
		const prefix string = ",\"enabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.Enabled))
	}
	{
		const prefix string = ",\"last_modified\":"
		out.RawString(prefix)
		out.Int64(int64(in.LastModified))
	}
	{
		const prefix string = ",\"action\":"
		out.RawString(prefix)
		easyjson486f95b0EncodeGithubComOvhCdsSdk45(out, in.Action)
	}
	{
		const prefix string = ",\"warnings\":"
		out.RawString(prefix)
		if in.Warnings == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v196, v197 := range in.Warnings {
				if v196 > 0 {
					out.RawByte(',')
				}
				easyjson486f95b0EncodeGithubComOvhCdsSdk44(out, v197)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk55(in *jlexer.Lexer, out *StepStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "step_order":
			out.StepOrder = int(in.Int())
		case "status":
			out.Status = string(in.String())
		case "start":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Start).UnmarshalJSON(data))
			}
		case "done":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Done).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk55(out *jwriter.Writer, in StepStatus) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"step_order\":"
		out.RawString(prefix[1:])
		out.Int(int(in.StepOrder))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"start\":"
		out.RawString(prefix)
		out.Raw((in.Start).MarshalJSON())
	}
	{
		const prefix string = ",\"done\":"
		out.RawString(prefix)
		out.Raw((in.Done).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk6(in *jlexer.Lexer, out *AuditWorkflow) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "project_key":
			out.ProjectKey = string(in.String())
		case "workflow_id":
			out.WorkflowID = int64(in.Int64())
		case "data_type":
			out.DataType = string(in.String())
		case "data_before":
			out.DataBefore = string(in.String())
		case "data_after":
			out.DataAfter = string(in.String())
		case "id":
			out.ID = int64(in.Int64())
		case "triggered_by":
			out.TriggeredBy = string(in.String())
		case "created":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Created).UnmarshalJSON(data))
			}
		case "event_type":
			out.EventType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk6(out *jwriter.Writer, in AuditWorkflow) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"project_key\":"
		out.RawString(prefix[1:])
		out.String(string(in.ProjectKey))
	}
	{
		const prefix string = ",\"workflow_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.WorkflowID))
	}
	{
		const prefix string = ",\"data_type\":"
		out.RawString(prefix)
		out.String(string(in.DataType))
	}
	{
		const prefix string = ",\"data_before\":"
		out.RawString(prefix)
		out.String(string(in.DataBefore))
	}
	{
		const prefix string = ",\"data_after\":"
		out.RawString(prefix)
		out.String(string(in.DataAfter))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"triggered_by\":"
		out.RawString(prefix)
		out.String(string(in.TriggeredBy))
	}
	{
		const prefix string = ",\"created\":"
		out.RawString(prefix)
		out.Raw((in.Created).MarshalJSON())
	}
	{
		const prefix string = ",\"event_type\":"
		out.RawString(prefix)
		out.String(string(in.EventType))
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk5(in *jlexer.Lexer, out *WorkflowNotification) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "workflow_id":
			out.WorkflowID = int64(in.Int64())
		case "source_node_ref":
			if in.IsNull() {
				in.Skip()
				out.SourceNodeRefs = nil
			} else {
				in.Delim('[')
				if out.SourceNodeRefs == nil {
					if !in.IsDelim(']') {
						out.SourceNodeRefs = make([]string, 0, 4)
					} else {
						out.SourceNodeRefs = []string{}
					}
				} else {
					out.SourceNodeRefs = (out.SourceNodeRefs)[:0]
				}
				for !in.IsDelim(']') {
					var v198 string
					v198 = string(in.String())
					out.SourceNodeRefs = append(out.SourceNodeRefs, v198)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "node_id":
			if in.IsNull() {
				in.Skip()
				out.NodeIDs = nil
			} else {
				in.Delim('[')
				if out.NodeIDs == nil {
					if !in.IsDelim(']') {
						out.NodeIDs = make([]int64, 0, 8)
					} else {
						out.NodeIDs = []int64{}
					}
				} else {
					out.NodeIDs = (out.NodeIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v199 int64
					v199 = int64(in.Int64())
					out.NodeIDs = append(out.NodeIDs, v199)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "type":
			out.Type = string(in.String())
		case "settings":
			easyjson486f95b0DecodeGithubComOvhCdsSdk38(in, &out.Settings)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk5(out *jwriter.Writer, in WorkflowNotification) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	if in.WorkflowID != 0 {
		const prefix string = ",\"workflow_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WorkflowID))
	}
	if len(in.SourceNodeRefs) != 0 {
		const prefix string = ",\"source_node_ref\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v200, v201 := range in.SourceNodeRefs {
				if v200 > 0 {
					out.RawByte(',')
				}
				out.String(string(v201))
			}
			out.RawByte(']')
		}
	}
	if len(in.NodeIDs) != 0 {
		const prefix string = ",\"node_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v202, v203 := range in.NodeIDs {
				if v202 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v203))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"settings\":"
		out.RawString(prefix)
		easyjson486f95b0EncodeGithubComOvhCdsSdk38(out, in.Settings)
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk4(in *jlexer.Lexer, out *Usage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "workflows":
			if in.IsNull() {
				in.Skip()
				out.Workflows = nil
			} else {
				in.Delim('[')
				if out.Workflows == nil {
					if !in.IsDelim(']') {
						out.Workflows = make([]Workflow, 0, 1)
					} else {
						out.Workflows = []Workflow{}
					}
				} else {
					out.Workflows = (out.Workflows)[:0]
				}
				for !in.IsDelim(']') {
					var v204 Workflow
					easyjson486f95b0DecodeGithubComOvhCdsSdk1(in, &v204)
					out.Workflows = append(out.Workflows, v204)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "environments":
			if in.IsNull() {
				in.Skip()
				out.Environments = nil
			} else {
				in.Delim('[')
				if out.Environments == nil {
					if !in.IsDelim(']') {
						out.Environments = make([]Environment, 0, 1)
					} else {
						out.Environments = []Environment{}
					}
				} else {
					out.Environments = (out.Environments)[:0]
				}
				for !in.IsDelim(']') {
					var v205 Environment
					easyjson486f95b0DecodeGithubComOvhCdsSdk9(in, &v205)
					out.Environments = append(out.Environments, v205)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pipelines":
			if in.IsNull() {
				in.Skip()
				out.Pipelines = nil
			} else {
				in.Delim('[')
				if out.Pipelines == nil {
					if !in.IsDelim(']') {
						out.Pipelines = make([]Pipeline, 0, 1)
					} else {
						out.Pipelines = []Pipeline{}
					}
				} else {
					out.Pipelines = (out.Pipelines)[:0]
				}
				for !in.IsDelim(']') {
					var v206 Pipeline
					easyjson486f95b0DecodeGithubComOvhCdsSdk7(in, &v206)
					out.Pipelines = append(out.Pipelines, v206)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "applications":
			if in.IsNull() {
				in.Skip()
				out.Applications = nil
			} else {
				in.Delim('[')
				if out.Applications == nil {
					if !in.IsDelim(']') {
						out.Applications = make([]Application, 0, 1)
					} else {
						out.Applications = []Application{}
					}
				} else {
					out.Applications = (out.Applications)[:0]
				}
				for !in.IsDelim(']') {
					var v207 Application
					easyjson486f95b0DecodeGithubComOvhCdsSdk8(in, &v207)
					out.Applications = append(out.Applications, v207)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk4(out *jwriter.Writer, in Usage) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Workflows) != 0 {
		const prefix string = ",\"workflows\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v208, v209 := range in.Workflows {
				if v208 > 0 {
					out.RawByte(',')
				}
				easyjson486f95b0EncodeGithubComOvhCdsSdk1(out, v209)
			}
			out.RawByte(']')
		}
	}
	if len(in.Environments) != 0 {
		const prefix string = ",\"environments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v210, v211 := range in.Environments {
				if v210 > 0 {
					out.RawByte(',')
				}
				easyjson486f95b0EncodeGithubComOvhCdsSdk9(out, v211)
			}
			out.RawByte(']')
		}
	}
	if len(in.Pipelines) != 0 {
		const prefix string = ",\"pipelines\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v212, v213 := range in.Pipelines {
				if v212 > 0 {
					out.RawByte(',')
				}
				easyjson486f95b0EncodeGithubComOvhCdsSdk7(out, v213)
			}
			out.RawByte(']')
		}
	}
	if len(in.Applications) != 0 {
		const prefix string = ",\"applications\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v214, v215 := range in.Applications {
				if v214 > 0 {
					out.RawByte(',')
				}
				easyjson486f95b0EncodeGithubComOvhCdsSdk8(out, v215)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk3(in *jlexer.Lexer, out *Permissions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "readable":
			out.Readable = bool(in.Bool())
		case "writable":
			out.Writable = bool(in.Bool())
		case "executable":
			out.Executable = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk3(out *jwriter.Writer, in Permissions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"readable\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Readable))
	}
	{
		const prefix string = ",\"writable\":"
		out.RawString(prefix)
		out.Bool(bool(in.Writable))
	}
	{
		const prefix string = ",\"executable\":"
		out.RawString(prefix)
		out.Bool(bool(in.Executable))
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk2(in *jlexer.Lexer, out *GroupPermission) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "group":
			easyjson486f95b0DecodeGithubComOvhCdsSdk46(in, &out.Group)
		case "permission":
			out.Permission = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk2(out *jwriter.Writer, in GroupPermission) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"group\":"
		out.RawString(prefix[1:])
		easyjson486f95b0EncodeGithubComOvhCdsSdk46(out, in.Group)
	}
	{
		const prefix string = ",\"permission\":"
		out.RawString(prefix)
		out.Int(int(in.Permission))
	}
	out.RawByte('}')
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk56(in *jlexer.Lexer, out *EventWorkflowPermissionUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "workflow_id":
			out.WorkflowID = int64(in.Int64())
		case "old_group_permission":
			easyjson486f95b0DecodeGithubComOvhCdsSdk2(in, &out.OldPermission)
		case "new_group_permission":
			easyjson486f95b0DecodeGithubComOvhCdsSdk2(in, &out.NewPermission)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk56(out *jwriter.Writer, in EventWorkflowPermissionUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"workflow_id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.WorkflowID))
	}
	{
		const prefix string = ",\"old_group_permission\":"
		out.RawString(prefix)
		easyjson486f95b0EncodeGithubComOvhCdsSdk2(out, in.OldPermission)
	}
	{
		const prefix string = ",\"new_group_permission\":"
		out.RawString(prefix)
		easyjson486f95b0EncodeGithubComOvhCdsSdk2(out, in.NewPermission)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventWorkflowPermissionUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson486f95b0EncodeGithubComOvhCdsSdk56(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventWorkflowPermissionUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson486f95b0EncodeGithubComOvhCdsSdk56(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventWorkflowPermissionUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson486f95b0DecodeGithubComOvhCdsSdk56(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventWorkflowPermissionUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson486f95b0DecodeGithubComOvhCdsSdk56(l, v)
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk57(in *jlexer.Lexer, out *EventWorkflowPermissionDelete) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "workflow_id":
			out.WorkflowID = int64(in.Int64())
		case "group_permission":
			easyjson486f95b0DecodeGithubComOvhCdsSdk2(in, &out.Permission)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk57(out *jwriter.Writer, in EventWorkflowPermissionDelete) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"workflow_id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.WorkflowID))
	}
	{
		const prefix string = ",\"group_permission\":"
		out.RawString(prefix)
		easyjson486f95b0EncodeGithubComOvhCdsSdk2(out, in.Permission)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventWorkflowPermissionDelete) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson486f95b0EncodeGithubComOvhCdsSdk57(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventWorkflowPermissionDelete) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson486f95b0EncodeGithubComOvhCdsSdk57(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventWorkflowPermissionDelete) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson486f95b0DecodeGithubComOvhCdsSdk57(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventWorkflowPermissionDelete) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson486f95b0DecodeGithubComOvhCdsSdk57(l, v)
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk58(in *jlexer.Lexer, out *EventWorkflowPermissionAdd) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "workflow_id":
			out.WorkflowID = int64(in.Int64())
		case "group_permission":
			easyjson486f95b0DecodeGithubComOvhCdsSdk2(in, &out.Permission)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk58(out *jwriter.Writer, in EventWorkflowPermissionAdd) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"workflow_id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.WorkflowID))
	}
	{
		const prefix string = ",\"group_permission\":"
		out.RawString(prefix)
		easyjson486f95b0EncodeGithubComOvhCdsSdk2(out, in.Permission)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventWorkflowPermissionAdd) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson486f95b0EncodeGithubComOvhCdsSdk58(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventWorkflowPermissionAdd) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson486f95b0EncodeGithubComOvhCdsSdk58(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventWorkflowPermissionAdd) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson486f95b0DecodeGithubComOvhCdsSdk58(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventWorkflowPermissionAdd) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson486f95b0DecodeGithubComOvhCdsSdk58(l, v)
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk59(in *jlexer.Lexer, out *EventWorkflowDelete) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "workflow":
			easyjson486f95b0DecodeGithubComOvhCdsSdk1(in, &out.Workflow)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk59(out *jwriter.Writer, in EventWorkflowDelete) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"workflow\":"
		out.RawString(prefix[1:])
		easyjson486f95b0EncodeGithubComOvhCdsSdk1(out, in.Workflow)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventWorkflowDelete) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson486f95b0EncodeGithubComOvhCdsSdk59(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventWorkflowDelete) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson486f95b0EncodeGithubComOvhCdsSdk59(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventWorkflowDelete) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson486f95b0DecodeGithubComOvhCdsSdk59(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventWorkflowDelete) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson486f95b0DecodeGithubComOvhCdsSdk59(l, v)
}
func easyjson486f95b0DecodeGithubComOvhCdsSdk60(in *jlexer.Lexer, out *EventWorkflowAdd) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "workflow":
			easyjson486f95b0DecodeGithubComOvhCdsSdk1(in, &out.Workflow)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson486f95b0EncodeGithubComOvhCdsSdk60(out *jwriter.Writer, in EventWorkflowAdd) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"workflow\":"
		out.RawString(prefix[1:])
		easyjson486f95b0EncodeGithubComOvhCdsSdk1(out, in.Workflow)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventWorkflowAdd) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson486f95b0EncodeGithubComOvhCdsSdk60(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventWorkflowAdd) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson486f95b0EncodeGithubComOvhCdsSdk60(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventWorkflowAdd) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson486f95b0DecodeGithubComOvhCdsSdk60(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventWorkflowAdd) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson486f95b0DecodeGithubComOvhCdsSdk60(l, v)
}
